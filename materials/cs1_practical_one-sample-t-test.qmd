---
title: "One-sample t-test"
---

```{r}
#| echo: false
#| message: false
#| results: hide
source(file = "setup_files/setup.R")
```

```{python}
#| echo: false
#| message: false
import shutup;shutup.please()
exec(open('setup_files/setup.py').read())
```

::: callout-tip
## Learning outcomes

**Questions**

- When do I perform a one-sample test?
- What are the assumptions?
- How do I interpret and present the results of the test?

**Objectives**

- Set out your hypothesis for single sample continuous data
- Be able to summarise and visualise the data
- Understand and assess the underlying assumptions of the test
- Perform a one-sample t-test
- Be able to interpret and report the results

:::

## Libraries and functions

::: {.callout-note collapse="true"}
## Click to expand

::: {.panel-tabset group="language"}
## tidyverse

### Libraries

```{r}
#| eval: false
# A collection of R packages designed for data science
library(tidyverse)
```

### Functions

```{r}
#| eval: false
#| warning: false
# Performs a one-sample t-test, Student's t-test and Welch's t-test in later sections
stats::t.test()

# Performs a Shapiro-Wilk test for normality
stats::shapiro.test()

# Plots a Q-Q plot for comparison with a normal distribution
ggplot2::stat_qq()

# Adds a comparison line to the Q-Q plot
ggplot2::stat_qq_line()
```

## R

### Functions

```{r}
#| eval: false
#| warning: false
# Performs a one-sample t-test, Student's t-test
# and Welch's t-test in later sections
stats::t.test()

# Plots a Q-Q plot for comparison with a normal distribution
stats::qqnorm()

# Adds a comparison line to the Q-Q plot
stats::qqline()

# Performs a Shapiro-Wilk test for normality
stats::shapiro.test()
```

## Python

| Libraries  | Description                                                              |
|:------------------|:----------------------------------------------------|
| `plotnine` | The Python equivalent of `ggplot2`.                                      |
| `pandas`   | A Python data analysis and manipulation tool.                            |
| `pingouin` | A Python module developed to have simple yet exhaustive stats functions. |

| Functions                                                                                     | Description                                                 |
|:--------------------------|:--------------------------------------------|
| [`pingouin.normality()`](https://pingouin-stats.org/generated/pingouin.normality.html)        | Performs the Shapiro-Wilk test for normality.               |
| [`pingouin.ttest()`](https://pingouin-stats.org/generated/pingouin.ttest.html#pingouin.ttest) | Performs a t-test                                           |
| `plotnine.stats.stat_qq()`                                                                    | Plots a Q-Q plot for comparison with a normal distribution. |
| `plotnine.stats.stat_qq_line()`                                                               | Adds a comparison line to the Q-Q plot.                     |
:::
:::

## Purpose and aim
One sample tests are used when we have a single sample of continuous data. It is used to find out if the sample came from a parent distribution with a given mean (or median). This essentially boils down to finding out if the sample mean (or median) is "close enough" to our hypothesised parent population mean (or median).
So, in the figure below, we could use these tests to see what the probability is that the sample of ten points comes from the distribution plotted above it i.e. a population with a mean of 20 mm.

```{r}
#| echo: false
set.seed(726)
tibble(x = dist_normal(20, 5),
       sample = rnorm(10,21,5)) %>% 
    ggplot(aes(xdist = x)) +
    stat_slab() +
    geom_point(aes(x = sample, y = 0), size = 3) +
    geom_vline(xintercept = 20, colour = "#c44101", size = 1) +
    labs(title = "Male guppy length (mm)",
         x = "length (mm)",
         y = "probability density")

set.seed(NULL)
```

## Choosing a test
There are two tests that we are going to look at in this situation; the one-sample t-test, and the one-sample Wilcoxon signed rank-sum test. Both tests work on the sort of data that we’re considering here, but they both have different assumptions.

If your data is normally distributed, then a one-sample t-test is appropriate. If your data aren’t normally distributed, but their distribution is symmetric, and the sample size is small then a one-sample Wilcoxon signed rank-sum test is more appropriate.

For each statistical test we consider there will be five tasks. These will come back again and again, so pay extra close attention.

::: {.callout-important}
1. Setting out of the hypothesis
2. Summarise and visualisation of the data
3. Assessment of assumptions
4. Implementation of the statistical test
5. Interpreting the output and presentation of results
:::

We won’t always carry these out in exactly the same order, but we will always consider each of the five tasks for every test.

## Data and hypotheses

For example, suppose we measure the body lengths of male guppies (in mm) collected from the Guanapo River in Trinidad. We want to test whether the data support the hypothesis that the mean body is actually 20 mm. We form the following null and alternative hypotheses:

-   $H_0$: The mean body length is equal to 20mm ($\mu =$ 20).
-   $H_1$: The mean body length is not equal to 20mm ($\mu \neq$ 20).

We will use a one-sample, two-tailed t-test to see if we should reject the null hypothesis or not.

-   We use a **one-sample** test because we only have one sample.
-   We use a **two-tailed** t-test because we want to know if our data suggest that the true (population) mean is different from 20 mm in either direction rather than just to see if it is greater than or less than 20 mm (in which case we would use a one-tailed test).
-   We're using a **t-test** because we don't know any better yet and because I'm telling you to. We'll look at what the precise assumptions/requirements need to be in a moment.

Make sure you have downloaded the data (see: [Data section](/materials#index-datasets)) and placed it within your working directory.

::: {.panel-tabset group="language"}
## tidyverse

First we load the relevant libraries:

```{r}
#| eval: false
#| warning: false
#| message: false
# load tidyverse
library(tidyverse)

# load rstatix, a tidyverse-friendly stats package
library(rstatix)
```

We then read in the data and create a table containing the data.

```{r}
#| warning: false
#| message: false
# import the data
fishlengthDF <- read_csv("data/CS1-onesample.csv")

fishlengthDF
```

The first line reads the data into R and creates an object called a **tibble**, which is a type of **data frame**. This data frame contains 3 columns: a unique `id`, `river` encoding the river and `length` with the measured guppy length.

## R

We then read in the data and create a vector containing the data.

```{r}
# import the data
fishlengthDF_r <- read.csv("data/CS1-onesample.csv")

# create a vector containing the data
fishlength_r <- fishlengthDF_r$length
```

The first line reads the data into R and creates an object called a data frame. This data frame only contains a single column of numbers called "Guanapo" (the name of the river). In most situations, and for most statistical analyses, having our data stored in a data frame is exactly what we'd want. However, for one sample tests we actually need our data to be stored as a vector. So, the second line extracts the values that are in the `Guanapo` column of our `fishlengthDF` data frame and creates a simple vector of numbers that we have called `fishlength_r` This step is only necessary for one-sample tests and when we look at more complex data sets, we won't need to do this second step at all.

## Python

We then read the data in:

```{python}
# load the data
fishlength_py = pd.read_csv('data/CS1-onesample.csv')

# inspect the data
fishlength_py.head()
```
:::

## Summarise and visualise

Summarise the data and visualise it:

::: {.panel-tabset group="language"}
## tidyverse

```{r}
summary(fishlengthDF)
```

From the `summary()` output we can see that the mean and median of the `length` variable are quite close together. The `id` column also has minimum, maximum, mean etc. values - these are not useful! The numbers in the `id` column have no numerical value, but are just to ensure each observation can be traced back, if needed.

```{r}
fishlengthDF %>% 
  ggplot(aes(x = river, y = length)) +
  geom_boxplot()
```

## R

```{r}
summary(fishlength_r)
```

From the `summary()` output we can see that the mean and median of the `length` variable are quite close together. The `id` column also has minimum, maximum, mean etc. values - these are not useful! The numbers in the `id` column have no numerical value, but are just to ensure each observation can be traced back, if needed.

```{r}
boxplot(fishlength_r, main = "Male guppies", ylab = "Length (mm)")
```

## Python

First we have a look at a numerical summary of the data:

```{python}
fishlength_py.describe()
```

From the `describe()` output we can see that the mean and median of the `length` variable are quite close together. The `id` column also has minimum, maximum, mean etc. values - these are not useful! The numbers in the `id` column have no numerical value, but are just to ensure each observation can be traced back, if needed.

```{python}
#| results: hide
(ggplot(fishlength_py,
        aes(x = 'river',
            y = 'length')) +
     geom_boxplot())
```
:::

The data do not appear to contain any obvious errors, and whilst both the mean and median are less than 20 (`r fishlengthDF %>% summarise(mean = mean(length)) %>% pull() %>% round(digits = 1)` and `r fishlengthDF %>% summarise(median = median(length)) %>% pull() %>% round(digits = 1)` respectively) it is not absolutely certain that the sample mean is sufficiently different from this value to be "statistically significant", although we may anticipate such a result.

## Assumptions

When it comes to one-sample tests, we have two options:

a.  t-test
b.  Wilcoxon signed-rank test

For us to use a t-test for this analysis (and for the results to be valid) we have to make two assumptions:

1.  The parent distribution from which the sample is taken is normally distributed (and as such the sample data are normally distributed themselves).

::: callout-note
It is worth noting though that the t-test is actually pretty robust in situations where the sample data are not normal. For sufficiently large sample sizes (your guess is as good as mine, but conventionally this means about 30 data points), you can use a t-test without worrying about whether the underlying population is normally distributed or not.
:::

2.  Each data point in the sample is independent of the others. This is in general not something that can be tested for and instead has to be considered from the sampling procedure. For example, taking repeated measurements from the same individual would generate data that are not independent.

The second point we know nothing about and so we ignore it here (this is an issue that needs to be considered from the experimental design), whereas the first assumption can be checked. There are three ways of checking for normality:

In increasing order of rigour, we have

1.  Histogram
2.  Quantile-quantile plot
3.  Shapiro-Wilk test

### Histogram of the data

Plot a histogram of the data, which gives:

::: {.panel-tabset group="language"}
## tidyverse

```{r}
fishlengthDF %>% 
  ggplot(aes(x = length)) +
  geom_histogram(bins = 15)
```

## R

```{r}
hist(fishlength_r, breaks = 15)
```

## Python

```{python}
#| results: hide
(ggplot(fishlength_py,
        aes(x = "length")) +
     geom_histogram(bins = 15))
```
:::

The distribution appears to be uni-modal and symmetric, and so it isn't obviously non-normal. However, there are a lot of distributions that have these simple properties but which aren't normal, so this isn't exactly rigorous. Thankfully there are other, more rigorous tests.

NB. By even looking at this distribution to assess the assumption of normality we are already going far beyond what anyone else ever does. Nevertheless, we will continue.

### Q-Q plot of the data

Q-Q plot is the short for quantile-quantile plot. This **diagnostic** plot (as it is sometimes called) is a way of comparing two distributions. How Q-Q plots work won't be explained here but will be addressed in the next session.

Construct a Q-Q Plot of the quantiles of the data against the quantiles of a normal distribution:

::: {.panel-tabset group="language"}
## tidyverse

```{r}
fishlengthDF %>% 
  ggplot(aes(sample = length)) +
  stat_qq() +
  stat_qq_line(colour = "blue")
```

## R

```{r}
# plot the Q-Q plot
qqnorm(fishlength_r)

# and add a comparison line
qqline(fishlength_r)
```

## Python

```{python}
#| results: hide
(ggplot(fishlength_py,
        aes(sample = "length")) +
     stat_qq() +
     stat_qq_line(colour = "blue"))
```
:::

What is important to know is that if the data were normally distributed then all of the points should lie on (or close to) the diagonal line in this graph.

In this case, the points lie quite close to the line for the most part but the sample quantiles (points) from either end of the sample distribution are either smaller (below the line on the left) or larger (above the line on the right) than expected if they were supposed to be normally distributed. This suggests that the sample distribution is a bit more spread out than would be expected if it came from a normal distribution.

It is important to recognise that there isn't a simple unambiguous answer when interpreting these types of graph, in terms of whether the assumption of normality has been well met or not and instead it often boils down to a matter of experience.

It is a very rare situation indeed where the assumptions necessary for a test will be met unequivocally and a certain degree of personal interpretation is always needed. Here you have to ask yourself whether the data are normal "enough" for you to be confident in the validity of the test.

Below are four examples of QQ plots for different types of distributions:

```{r}
#| echo: false
# load required libraries
library(distributional)
library(ggdist)

# set.seed to make images reproducible
set.seed(1984)

# create data frame with sampled distributions
df_dist <- data.frame(norm_dist = rnorm(200,0,1),
           unif_dist = runif(200,-1,1),
           t_dist = rt(200,5),
           exp_dist = rexp(200))
```

```{r}
#| echo: false
norm1 <- ggplot(df_dist, aes(x = norm_dist)) +
    stat_dots() +
    labs(x = "sampled value",
         y = NULL)

norm2 <- ggplot(df_dist, aes(sample = norm_dist)) +
    stat_qq() +
    stat_qq_line(colour = "blue") +
    labs(x = "theoretical quantiles",
         y = "sample quantiles")
    
norm1 + norm2 +
    plot_annotation(title = "Normal distribution, 200 samples",
                    tag_levels = "A")
```

These two graphs relate to 200 data points that have been drawn from a normal distribution. Even here you can see that the points do not all lie perfectly on the diagonal line in the QQ plot, and a certain amount of deviation at the top and bottom of the graph can happen just by chance (if I were to draw a different set of point then the graph would look slightly different).

------------------------------------------------

```{r}
#| echo: false
unif1 <- ggplot(df_dist, aes(x = unif_dist)) +
    stat_dots() +
    labs(x = "sampled value",
         y = NULL)

unif2 <- ggplot(df_dist, aes(sample = unif_dist)) +
    stat_qq() +
    stat_qq_line(colour = "blue") +
    labs(x = "theoretical quantiles",
         y = "sample quantiles")
    
unif1 + unif2 +
    plot_annotation(title = "Uniform distribution, 200 samples",
                    tag_levels = "A")
```

These two graphs relate to 200 data points that have been drawn from a uniform distribution. Uniform distributions are more condensed than normal distributions, and this is reflected in the QQ plot having a very pronounced S-shaped pattern to it (this is colloquially known as **snaking**).

------------------------------------------------

```{r}
#| echo: false
tdist1 <- ggplot(df_dist, aes(x = t_dist)) +
    stat_dots() +
    labs(x = "sampled value",
         y = NULL)

tdist2 <- ggplot(df_dist, aes(sample = t_dist)) +
    stat_qq() +
    stat_qq_line(colour = "blue") +
    labs(x = "theoretical quantiles",
         y = "sample quantiles")
    
tdist1 + tdist2 +
    plot_annotation(title = "T distribution, 200 samples",
                    tag_levels = "A")
```

These two graphs relate to 200 data points that have been drawn from a t distribution. t distributions are more spread out than normal distributions, and this is reflected in the QQ plot again having a very pronounced S-shaped pattern to it, but this time the snaking is a reflection of that observed for the uniform distribution.

------------------------------------------------

```{r}
#| echo: false
exp_dist1 <- ggplot(df_dist, aes(x = exp_dist)) +
    stat_dots() +
    labs(x = "sampled value",
         y = NULL)

exp_dist2 <- ggplot(df_dist, aes(sample = exp_dist)) +
    stat_qq() +
    stat_qq_line(colour = "blue") +
    labs(x = "theoretical quantiles",
         y = "sample quantiles")
    
exp_dist1 + exp_dist2 +
    plot_annotation(title = "Exponential distribution, 200 samples",
                    tag_levels = "A")
```

These two graphs relate to 200 data points that have been drawn from an exponential distribution. Exponential distributions are not symmetric and are very skewed compared with normal distributions. The significant right-skew in this distribution is reflected in the QQ plot again having points that curve away above the diagonal line at both ends (a left-skew would have the points being below the line at both ends).

In all four cases it is worth noting that the deviations are only at the ends of the plot.

### Shapiro-Wilk test

This is one of a number of formal statistical test that assess whether a given sample of numbers come from a normal distribution. It calculates the probability of getting the sample data if the underlying distribution is in fact normal. It is very easy to carry out in R.

Perform a Shapiro-Wilk test on the data:

::: {.panel-tabset group="language"}
## tidyverse
The `shapiro.test()` function needs a numerical vector as input. We get this by extracting the `length` values with the `pull()` function. We then pipe this to the `shapiro.test()` function.

```{r}
fishlengthDF %>% 
    pull(length) %>% 
    shapiro.test()
```

-   The 1st line gives the name of the test and the `data:` tells you which data are used. In our case this is coming from the pipe and is denoted as `.`
-   The 3rd line contains the two key outputs from the test:
-   The calculated W-statistic is 0.9494 (we don't need to know this)
-   The p-value is 0.1764

## R

```{r}
shapiro.test(fishlength_r)
```

-   The 1st line gives the name of the test and the 2nd line reminds you what the data set was called
-   The 3rd line contains the two key outputs from the test:
-   The calculated W-statistic is 0.9494 (we don't need to know this)
-   The p-value is 0.1764

## Python

We take the `length` values from the `fishlength_py` data frame and pass that to the `normality()` function in `pingouin`:

```{python}
pg.normality(fishlength_py.length)
```

-   the `W` column gives us the W-statistic
-   the `pval` column gives us the p-value
-   the `normal` column gives us the outcome of the test in `True/False`
:::

As the p-value is bigger than 0.05 (say) then we can say that there is insufficient evidence to reject the null hypothesis that the sample came from a normal distribution.

It is important to recognise that the Shapiro-Wilk test is not without limitations. It is rather sensitive to the sample size being considered. In general, for small sample sizes, the test is very relaxed about normality (and nearly all data sets are considered normal), whereas for large sample sizes the test can be overly strict, and it can fail to recognise data sets that are very nearly normal indeed.

### Assumptions overview

::: callout-important
In terms of assessing the assumptions of a test it is always worth considering several methods, both graphical and analytic, and not just relying on a single method.
:::

In the `fishlength` example, the graphical Q-Q plot analysis was not especially conclusive as there was some suggestion of snaking in the plots, but the Shapiro-Wilk test gave a non-significant p-value (0.1764). Putting these two together, along with the original histogram and the recognition that there were only 30 data points in the data set I personally would be happy that the assumptions of the t-test were met well enough to trust the result of the t-test, but you may not be...

In which case we would consider an alternative test that has less stringent assumptions (but is less powerful): the [one-sample Wilcoxon signed-rank test](#cs1-onesample-wilcoxon-signed-rank).

## Implement and interpret the test

Perform a one-sample, two-tailed t-test:

::: {.panel-tabset group="language"}
## tidyverse

```{r}
fishlengthDF %>% 
    pull(length) %>% 
    t.test(mu = 20, alternative = "two.sided")
```

-   The first argument must be a numerical vector of data values. We used the `pull()` function to get these from the data set. We don't have to specify this in `t.test()`, since those data are coming from the pipe.
-   The second argument must be a number and is the mean to be tested under the null hypothesis.
-   The third argument gives the type of alternative hypothesis and must be one of `two.sided`, `greater` or `less`. We have no prior assumptions on whether the alternative fish length would be greater or less than 20, so we choose `two.sided`.

In the output:

-   The 1st line gives the name of the test and the 2nd line reminds you what the dataset was called
-   The 3rd line contains the three key outputs from the test:
    -   The calculated t-value is -3.5492 (we'll need this for reporting)
    -   There are 28 degrees of freedom (again we'll need this for reporting)
    -   The p-value is 0.001387.
-   The 4th line simply states the alternative hypothesis
-   The 5th and 6th lines give the 95th confidence interval (we don't need to know this)
-   The 7th, 8th and 9th lines give the sample mean again (18.29655).

## R

```{r}
t.test(fishlength_r,
       mu = 20,
       alternative = "two.sided")
```

-   The first argument must be a numerical vector of data values.
-   The second argument must be a number and is the mean to be tested under the null hypothesis.
-   The third argument gives the type of alternative hypothesis and must be one of `two.sided`, `greater` or `less`. We have no prior assumptions on whether the alternative fish length would be greater or less than 20, so we choose `two.sided`.

In the output:

-   The 1st line gives the name of the test and the 2nd line reminds you what the dataset was called
-   The 3rd line contains the three key outputs from the test:
    -   The calculated t-value is -3.5492 (we'll need this for reporting)
    -   There are 28 degrees of freedom (again we'll need this for reporting)
    -   The p-value is 0.001387.
-   The 4th line simply states the alternative hypothesis
-   The 5th and 6th lines give the 95th confidence interval (we don't need to know this)
-   The 7th, 8th and 9th lines give the sample mean again (18.29655).

## Python

```{python}
pg.ttest(x = fishlength_py.length,
         y = 20,
         alternative = "two-sided").round(3)
```

-   the `x` argument must be a numerical series of data values
-   the `y` argument must be a number and is the mean to be tested under the null hypothesis
-   the `alternative` argument defines the alternative hypothesis (we have no expectation that the fish length is smaller or larger than 20, if the null hypothesis does not hold up)
-   with `.round(3)` we're rounding the outcome to 3 digits

In the output:

We're not focussing on *all* of the output just yet, but

-   `T` gives us the value of the t-statistic
-   `dof` gives us the degrees of freedom (we'll need this for reporting)
-   `pval` gives us the p-value
:::

The p-value is what we're mostly interested in. It gives the probability of us getting a sample such as ours if the null hypothesis were actually true.

::: {.callout-important}
## p-value interpretation

-   a high p-value means that there is a high probability of observing a sample such as ours and the null hypothesis is probably true whereas
-   a low p-value means that there is a low probability of observing a sample such as ours and the null hypothesis is probably not true.

It is important to realise that the p-value is just an indication and there is no absolute certainty here in this interpretation.

People, however like more definite answers and so we pick an artificial probability threshold (called a significance level) in order to be able to say something more decisive. The standard significance level is 0.05 and since our p-value is smaller than this we choose to say that "it is very unlikely that we would have this particular sample if the null hypothesis were true".
:::

In this case the p-value is much smaller than 0.05, so we reject our null hypothesis and state that:

> A one-sample t-test indicated that the mean body length of male guppies ($\bar{x}$ = 18.29mm) differs significantly from 20 mm (p = 0.0014).

The above sentence is an adequate concluding statement for this test and is what we would write in any paper or report. Note that we have included (in brackets) information on the actual mean value of our group($\bar{x}$ = 18.29mm) and the p-value (p = 0.0014). In some journals you are only required to report whether the p-value is less than the critical value (e.g. p \< 0.05) but I would always recommend reporting the actual p-value obtained.

::: {.callout-important}
Additional information, such as the test statistic and degrees of freedom, are sometimes also reported. This is more of a legacy from the time where people did the calculations by hand and used tables. I personally find it much more useful to report as above and supply the data and analysis, so other people can see what I've done and why!
:::

## Exercise: gastric juices

The following data are the dissolving times (in seconds) of a drug in agitated gastric juice:

`42.7, 43.4, 44.6, 45.1, 45.6, 45.9, 46.8, 47.6`

Do these results provide any evidence to suggest that dissolving time for this drug is different from 45 seconds?

1.  Think about how you would organise these data into a  [tidy](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html) format
2. Load the data from `CS1-gastric_juices.csv`
3.  Write down the null and alternative hypotheses.
4.  Summarise and visualise the data and perform an appropriate one-sample t-test.
    -   What can you say about the dissolving time? (what sentence would you use to report this)
5.  Check the assumptions for the test.
    -   Was the test valid?

::: {.callout-tip collapse="true"}
## Answer

### Hypotheses

$H_0$ : mean $=$ 45s

$H_1$ : mean $\neq$ 45s

### Data, summarise & visualise

We read in the data from `CS1-gastric_juices.csv`. It contains two columns, an `id` column and a `dissolving_time` column with the measured values.

::: {.panel-tabset group="language"}
## tidyverse

```{r, message=FALSE, warning=FALSE}
# load the data
dissolving <- read_csv("data/CS1-gastric_juices.csv")

# have a look at the data
dissolving

# summarise the data
summary(dissolving)
```

We can look at the histogram and box plot of the data:

```{r}
# create a histogram
dissolving %>% 
  ggplot(aes(x = dissolving_time)) +
  geom_histogram(bins = 4)

# create a boxplot
dissolving %>% 
  ggplot(aes(y = dissolving_time)) +
  geom_boxplot()
```

## R

```{r}
# load the data
dissolving_r <- read.csv("data/CS1-gastric_juices.csv")

# have a look at the data
dissolving_r

# summarise the data
summary(dissolving_r)
```

```{r}
hist(dissolving_r$dissolving_time)

boxplot(dissolving_r$dissolving_time)
```

## Python

```{python}
# load the data
dissolving_py = pd.read_csv("data/CS1-gastric_juices.csv")

# have a look at the data
dissolving_py.head()

# summarise the data
dissolving_py.describe()
```

We can look at the histogram and box plot of the data:

```{python}
#| results: hide
# create a histogram
(ggplot(dissolving_py,
        aes(x = "dissolving_time")) +
     geom_histogram(bins = 4))
```

```{python}
#| results: hide
# create a box plot
(ggplot(dissolving_py,
        aes(x = 1,
            y = "dissolving_time")) +
     geom_boxplot())
```

Python (or `plotnine` in particular) gets a bit cranky if you try to create a `geom_boxplot` but do not define the `x` aesthetic. Hence us putting it as `1`. The value has no numerical meaning, however.
:::

There are only 8 data points, so the histogram is rather uninformative. Thankfully the box plot is a bit more useful here. We can see:

1.  There don't appear to be any major errors in data entry and there aren't any huge outliers
2.  The median value in the box-plot (the thick black line) is pretty close to 45 and so I wouldn't be surprised if the mean of the data isn't significantly different from 45. We can confirm that by looking at the mean and median values that we calculated using the summary command from earlier.
3.  The data appear to be symmetric, and so whilst we can't tell if they're normal they're a least not massively skewed.

### Assumptions

Normality:

::: {.panel-tabset group="language"}
## tidyverse

```{r}
# perform Shapiro-Wilk test
dissolving %>% 
    pull(dissolving_time) %>% 
    shapiro.test()
```

```{r}
# create a Q-Q plot
dissolving %>% 
  ggplot(aes(sample = dissolving_time)) +
  stat_qq() +
  stat_qq_line(colour = "blue")
```

## R

```{r}
shapiro.test(dissolving_r$dissolving_time)
```

```{r}
qqnorm(dissolving_r$dissolving_time)
qqline(dissolving_r$dissolving_time)
```

## Python

```{python}
# Perform Shapiro-Wilk test to check normality
pg.normality(dissolving_py.dissolving_time)
```

```{python, results='hide'}
# Create a Q-Q plot
(ggplot(dissolving_py,
        aes(sample = "dissolving_time")) +
     stat_qq() +
     stat_qq_line(colour = "blue"))
```
:::

-   The Shapiro test has a p-value of 0.964 which (given that it is bigger than 0.05) suggests that the data are normal enough.
-   The Q-Q plot isn't perfect, with some deviation of the points away from the line but since the points aren't accelerating away from the line and, since we only have 8 points, we can claim, with some slight reservations, that the assumption of normality appears to be adequately well met.

Overall, we are somewhat confident that the assumption of normality is well-enough met for the t-test to be an appropriate method for analysing the data. Note the ridiculous number of caveats here and the slightly political/slippery language I'm using. This is intentional and reflects the ambiguous nature of assumption checking. This is an important approach to doing statistics that you need to embrace.

In reality, if I found myself in this situation I would also try doing a non-parametric test on the data (Wilcoxon signed-rank test) and see whether I get the same conclusion about whether the median dissolving time differs from 45s. Technically, you don't know about the Wilcoxon test yet as you haven't done that section of the materials. Anyway, if I get the same conclusion then my confidence in the result of the test goes up considerably; it doesn't matter how well an assumption has been met, I get the same result. If on the other hand I get a completely different conclusion from carrying out the non-parametric test then all bets are off; I now have very little confidence in my test result as I don't know which one to believe (in the case that the assumptions of the test are a bit unclear). In this example a Wilcoxon test also gives us a non-significant result and so all is good.

### Implement test

::: {.panel-tabset group="language"}
## tidyverse

```{r}
# perform one-sample t-test
dissolving %>% 
    pull(dissolving_time) %>% 
    t.test(mu = 45,
           alternative = "two.sided")
```

## R

```{r}
t.test(dissolving_r$dissolving_time,
       mu = 45 ,
       alternative = "two.sided")
```

## Python

```{python}
pg.ttest(x = dissolving_py.dissolving_time,
         y = 45,
         alternative = "two-sided").round(3)
```
:::

> A one-sample t-test indicated that the mean dissolving time of the drug is not significantly different from 45s ($\bar{x}$ = 45.2, p = 0.725).

And that, is that.
:::

## Key points

::: {.callout-note}
-   One-sample tests are used when you have a single sample of continuous data
-   The t-test assumes that the data are normally distributed and independent of each other
-   A good way of assessing the assumption of normality is by checking the data against a Q-Q plot
:::
