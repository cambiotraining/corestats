---
title: "Student's t-test"
---

```{r}
#| echo: false
#| message: false
#| results: hide
source(file = "setup_files/setup.R")
```

```{python}
#| echo: false
#| message: false
#| warning: false
import shutup;shutup.please()
exec(open('setup_files/setup.py').read())
```

::: callout-tip
## Learning outcomes

**Questions**

- When do I perform a two-sample test?
- What are the assumptions?
- How do I interpret and present the results of the test?

**Objectives**

- Set out your hypothesis for comparing two samples of continuous data
- Be able to summarise and visualise the data
- Understand and assess the underlying assumptions of the test
- Perform a two-sample t-test
- Be able to interpret and report the results

:::

## Libraries and functions

::: {.callout-note collapse="true"}
## Click to expand

::: {.panel-tabset group="language"}
## R (tidyverse)

### Libraries

```{r}
#| eval: false
# A collection of R packages designed for data science
library(tidyverse)

# Converts stats functions to a tidyverse-friendly format
library(rstatix)
```

### Functions

```{r}
#| eval: false
#| warning: false
# Computes summary statistics                         
rstatix::get_summary_stats() 

# Performs Levene's test for equality of variance
# (non-normally distributed data)
rstatix::levene_test()

# Performs Bartlett's test for equality of variance
# (normally distributed data)
stats::bartlett.test()

# Plots a Q-Q plot for comparison with a normal distribution
ggplot2::stat_qq()

# Adds a comparison line to the Q-Q plot
ggplot2::stat_qq_line()
```

## R (base)

### Libraries

```{r}
#| eval: false
# Provides additional statistical functionality
# and converts stats functions to a tidyverse-friendly format
library(rstatix)
```

### Functions

```{r}
#| eval: false
#| warning: false
# Performs Levene's test for equality of variance
# (non-normally distributed data)
rstatix::levene_test()

# Splits the data into subsets, computes summary statistics
# for each, and returns the result in a convenient form
stats::aggregate()

# Converts a stacked data frame into an unstacked data frame
# (or a list if the lengths of the samples are different)
utils::unstack()

# Performs Bartlett's test for equality of variance
# (normally distributed data)
stats::bartlett.test()

# Performs a one-sample t-test, Student's t-test and Welch's t-test in later sections
stats::t.test()

# Plots a Q-Q plot for comparison with a normal distribution
stats::qqnorm()

# Adds a comparison line to the Q-Q plot
stats::qqline()

# Performs a Shapiro-Wilk test for normality
stats::shapiro.test()
```

## Python

| Libraries  | Description                                                              |
|:---------------------|:-------------------------------------------------|
| `plotnine` | The Python equivalent of `ggplot2`.                                      |
| `pandas`   | A Python data analysis and manipulation tool.                            |
| `pingouin` | A Python module developed to have simple yet exhaustive stats functions. |

| Functions                                                                                                                      | Description                                                 |
|:-----------------------------------|:-----------------------------------|
| `pandas.DataFrame.read_csv`                                                                                                    | Reads in a `.csv` file                                      |
| `pandas.DataFrame.head()`                                                                                                      | Plots the first few rows                                    |
| `pandas.DataFrame.describe()`                                                                                                  | Gives summary statistics                                    |
| `pandas.DataFrame.groupby()`                                                                                                   | Group DataFrame using a mapper or by a Series of columns    |
| `pandas.DataFrame.query()`                                                                                                     | Query the columns of a DataFrame with a boolean expression  |
| [`pingouin.normality()`](https://pingouin-stats.org/generated/pingouin.normality.html)                                         | Performs the Shapiro-Wilk test for normality.               |
| [`pingouin.homoscedasticity()`](https://pingouin-stats.org/generated/pingouin.homoscedasticity.html#pingouin.homoscedasticity) | Checks for equality of variance.                            |
| [`pingouin.ttest()`](https://pingouin-stats.org/generated/pingouin.ttest.html#pingouin.ttest)                                  | Performs a t-test                                           |
| `plotnine.stats.stat_qq()`                                                                                                     | Plots a Q-Q plot for comparison with a normal distribution. |
| `plotnine.stats.stat_qq_line()`                                                                                                | Adds a comparison line to the Q-Q plot.                     |
:::
:::

### Purpose and aim
These two-sample Student's t-test is used when we have two samples of continuous data where we are trying to find out if the samples came from the same parent distribution or not. This essentially boils down to finding out if there is a difference in the means of the two samples.

## Data and hypotheses

For example, suppose we now measure the body lengths of male guppies (in mm) collected from two rivers in Trinidad; the Aripo and the Guanapo. We want to test whether the mean body length differs between samples. We form the following null and alternative hypotheses:

-   $H_0$: The mean body length does not differ between the two groups $(\mu A = \mu G)$
-   $H_1$: The mean body length does differ between the two groups $(\mu A \neq \mu G)$

We use a two-sample, two-tailed t-test to see if we can reject the null hypothesis.

-   We use a two-sample test because we now have two samples.
-   We use a two-tailed t-test because we want to know if our data suggest that the true (population) means are different from one another rather than that one mean is specifically bigger or smaller than the other.
-   We're using Student's t-test because the sample sizes are big and because we're assuming that the parent populations have equal variance (We can check this later).

The data are stored in the file `data/CS1-twosample.csv`.

Let's read in the data and have a quick look at the first rows to see how the data is structured.

Make sure you have downloaded the data and placed it within your working directory.

::: {.panel-tabset group="language"}
## R (tidyverse)

First we load the relevant libraries:

```{r}
#| eval: false
#| warning: false
#| message: false
# load tidyverse
library(tidyverse)

# load rstatix, a tidyverse-friendly stats package
library(rstatix)
```

We then read in the data and create a table containing the data.

```{r}
#| message: false
rivers <- read_csv("data/CS1-twosample.csv")

rivers
```

## R (base)

```{r}
rivers_r <- read.csv("data/CS1-twosample.csv")

head(rivers_r)
```

## Python

```{python}
rivers_py = pd.read_csv("data/CS1-twosample.csv")

rivers_py.head()
```
:::

## Summarise and visualise {#cs1-students-sumvisual}

Let's first summarise the data.

::: {.panel-tabset group="language"}
## R (tidyverse)

```{r}
summary(rivers)
```

This gives us the standard summary statistics, but in this case we have more than one group (Aripo and Guanapo), so it might be helpful to get summary statistics *per group*. One way of doing this is by using the `get_summary_stats()` function from the `rstatix` library.

```{r}
# get common summary stats for the length column
rivers %>% 
  group_by(river) %>% 
  get_summary_stats(type = "common")
```

Numbers might not always give you the best insight into your data, so we also visualise our data:

```{r}
rivers %>% 
  ggplot(aes(x = river, y = length)) +
  geom_boxplot()
```

## R (base)

```{r}
summary(rivers_r)
```

This gives us the standard summary statistics, but in this case we have more than one group (Aripo and Guanapo), so it might be helpful to get summary statistics *per group*. We can do this in base R using the `aggregate()` function.

```{r}
aggregate(length ~ river,
          FUN = summary,
          data = rivers_r)
```

-   The first argument defines the variable that is being used (`length`) and grouping (`river`)
- The second argument defines the function that is applied across the subsets (in this case that's the `summary()` function)   
- The third argument is the data frame that is used

Numbers might not always give you the best insight into your data, so we also visualise our data:

```{r}
boxplot(length ~ river,
        data = rivers_r)
```

We can use a very similar notation as we did for the summary statistics (`length ~ river`), so a box plot is created per group.

## Python

```{python}
rivers_py.describe()
```

This gives us the standard summary statistics, but in this case we have more than one group (Aripo and Guanapo), so it might be helpful to get summary statistics *per group*. Here we use the `pd.groupby()` function to group by `river`. We only want to have summary statistics for the `length` variable, so we specify that as well:

```{python}
rivers_py.groupby("river")["length"].describe()
```

Numbers might not always give you the best insight into your data, so we also visualise our data:

```{python}
#| results: hide
(ggplot(rivers_py,
        aes(x = "river", y = "length")) + 
     geom_boxplot())
```
:::

The box plot does appear to suggest that the two samples have different means, and moreover that the guppies in Guanapo may be smaller than the guppies in Aripo. It isn't immediately obvious that the two populations don't have equal variances though (box plots are not quite the right tool for this), so we plough on. Who ever said statistics would be glamorous?

## Assumptions

In order to use a Student's t-test (and for the results to be strictly valid) we have to make three assumptions:

1.  The parent distributions from which the samples are taken are both normally distributed (which would lead to the sample data being normally distributed too).
2.  Each data point in the samples is independent of the others.
3.  The parent distributions should have the same variance.

In this example the first assumption can be ignored as the sample sizes are large enough (because of maths, with Aripo containing 39 and Guanapo 29 samples). If the samples were smaller then we would use the tests from the previous section.

The second point we can do nothing about unless we know how the data were collected, so again we ignore it.

The third point regarding equality of variance can be tested using either Bartlett's test (if the samples are normally distributed) or Levene's test (if the samples are not normally distributed).

This is where it gets a bit trickier. Although we don't care if the samples are normally distributed for the t-test to be valid (because the sample size is big enough to compensate), we do need to know if they are normally distributed in order to decide which variance test to use.

So we perform a [Shapiro-Wilk test](#shapiro-wilk-test) on both samples separately.

::: {.panel-tabset group="language"}
## R (tidyverse)

We can use the `filter()` function to filter the data by `river`, then we perform the Shapiro-Wilk test on the `length` measurements:

```{r}
# filter data by river and perform test
rivers %>% 
    filter(river == "Aripo") %>% 
    pull(length) %>% 
    shapiro.test()

rivers %>% 
    filter(river == "Guanapo") %>% 
    pull(length) %>% 
    shapiro.test()
```

## R (base)

Before we can do that, we need to convert the data to a format where the data is split by `river`:

```{r cs1-twosample-unstack, results='hide'}
# create a new object (a list) that contains the unstacked data
uns_rivers <- unstack(rivers_r, form = length ~ river)
# have a look at the data
uns_rivers
```

Now that we've separated the data by river we can perform the Shapiro-Wilk test:

```{r cs1-twosample-shapiro}
shapiro.test(uns_rivers$Aripo)

shapiro.test(uns_rivers$Guanapo)
```

## Python

To perform a Shapiro-Wilk test we can use the `normality()` function from `pingouin`. We can give it the data in the original 'long' format, where we specify:

-   `dv` = dependent variable, `length`
-   `group` = grouping variable, `river`
-   `data` = data frame

```{python}
pg.normality(dv = "length",
             group = "river",
             data = rivers_py)
```
:::

We can see that whilst the Guanapo data is probably normally distributed (p = 0.1764 \> 0.05), the Aripo data is unlikely to be normally distributed (p = 0.02802 \< 0.05). Remember that the p-value gives the probability of observing each sample if the parent population is actually normally distributed.

The Shapiro-Wilk test is quite sensitive to sample size. This means that if you have a large sample then even small deviations from normality will cause the sample to fail the test, whereas smaller samples are allowed to pass with much larger deviations. Here the Aripo data has nearly 40 points in it compared with the Guanapo data and so it is much easier for the Aripo sample to fail compared with the Guanapo data.

:::{.callout-important}
Complete [Exercise -@sec-exr_rivers].
:::

The Q-Q plots show the opposite of what we found with the Shapiro-Wilk tests: the data for Aripo look pretty normally distributed apart from one data point, whereas the assumption of normality for the Guanapo data is less certain.

What to do? Well, you could be conservative and state that you are not confident that the data in either group are normally distributed. That would be a perfectly reasonable conclusion.

I would personally not have issues with stating that the Aripo data are probably normally distributed *enough*.

## Equality of variance

:::{.callout-tip}
Remember that statistical tests do not provide answers, they merely suggest patterns. Human interpretation is still a crucial aspect to what we do.
:::

The reason why we're checking for equality of variance (also referred to as **homogeneity of variance**) is because many statistical tests assume that the spread of the data within different parental populations (in this case, two) is the same.

If that is indeed the case, then the data themselves should have equal spread as well.

The Shapiro-Wilk test and the Q-Q plots have shown that some of the data might not be normal *enough* (although in opposite directions!) and so in order to test for equality of variance we will use Levene's test.

::: {.panel-tabset group="language"}
## R (tidyverse)

The function we use is `levene_test()` from the `rstatix` library.

It takes the data in the form of a formula as follows:

```{r}
rivers %>% 
  levene_test(length ~ river)
```

The key bit of information is the `p` column. This is the p-value (0.1876) for this test.

## R (base)

Levene's test is not included in the default R packages. Instead, we're using the additional functionality from the `rstatix` package. You will have to install _and_ load the package, as follows:

```{r}
#| eval: false
install.packages("rstatix")

library(rstatix)
```

We can now perform Levene's test using the `levene_test()` function. It takes the data in the form of a formula as follows:
```{r}
levene_test(length ~ river,
            data = rivers_r)
```

Ignore any warning you might get about coercion to factors (the test needs to create grouped variables to work and R versions from 4.x onwards do not read in the data as factors).

The key bit of information is the `p` column. This is the p-value (0.1876) for this test.

## Python

To test for equality of variance, we can use the `homoscedasticity()` function from `pingouin`.

Note that, contrary to R, we specify the type of test in the `method` argument. The default is `"levene"`, assuming that data are *not* normally distributed.

```{python}
pg.homoscedasticity(dv = "length",
                    group = "river",
                    method = "levene",
                    data = rivers_py)
```
:::

The p-value tells us the probability of observing these two samples if they come from distributions with the same variance. As this probability is greater than our arbitrary significance level of 0.05 then we can be somewhat confident that the necessary assumptions for carrying out Student's t-test on these two samples was valid. (Once again woohoo!)

### Bartlett's test

If we had wanted to carry out Bartlett's test (i.e. if the data *had* been sufficiently normally distributed) then we would have done:

::: {.panel-tabset group="language"}
## R (tidyverse)

Here we use `bartlett.test()` function. As before, the data is coming from the pipe, so we define this with `.`.

```{r}
# perform Bartlett's test on the data and tidy
rivers %>% 
  bartlett.test(length ~ river,
                data = .)
```

## R (base)

```{r}
bartlett.test(length ~ river, data = rivers_r)
```

The relevant p-value is given on the 3rd line.

## Python

```{python}
pg.homoscedasticity(dv = "length",
                    group = "river",
                    method = "bartlett",
                    data = rivers_py)
```
:::

## Implement and interpret the test

In this case we're ignoring the fact that the data are not normal enough, according to the Shapiro-Wilk test. However, this is not entirely naughty, because the sample sizes are pretty large and the t-test is also pretty robust in this case, we can perform a t-test. Remember, this is only allowed because the variances of the two groups (Aripo and Guanapo) are equal.

Perform a two-sample, two-tailed, t-test:

::: {.panel-tabset group="language"}
## R (tidyverse)

```{r}
# two-sample, two-tailed t-test
t.test(length ~ river,
       alternative = "two.sided",
       var.equal = TRUE,
       data = rivers)
```

Here we do the following:

-   The first argument must be in the formula format: `variables ~ category`
-   The second argument gives the type of alternative hypothesis and must be one of `two.sided`, `greater` or `less`
-   The third argument says whether the variance of the two samples can be assumed to be equal (Student's t-test) or unequal (Welch's t-test)

So, how do we interpret these results?

-   The 1st line gives the name of the test and the 2nd line reminds you what the data set was called, and what variables were used.
-   The 3rd line contains the three key outputs from the test:
    -   The calculated t-value is 3.8433
    -   There are 66 degrees of freedom
    -   The p-value is 0.0002754.
-   The 4th line simply states the alternative hypothesis in terms of the difference between the two sample means (testing if the two sample means are different is equivalent to testing whether the difference in the means is equal to zero).
-   The 5th and 6th lines give the 95th confidence interval (we don't need to know this here).
-   The 7th, 8th and 9th lines give the sample means for each group (20.33077 in Aripo and 18.29655 in Guanapo) which we found earlier.

## R (base)

```{r}
t.test(length ~ river, data = rivers_r,
       alternative = "two.sided",
       var.equal = TRUE)
```

-   The first argument must be in the formula format: `variables ~ category`
-   The second argument must be the name of the data frame
-   The third argument gives the type of alternative hypothesis and must be one of `two.sided`, `greater` or `less`
-   The fourth argument says whether the variance of the two samples can be assumed to be equal (Student's t-test) or unequal (Welch's t-test)

So, how do we interpret the results?

-   The 1st line gives the name of the test and the 2nd line reminds you what the data set was called, and what variables were used.
-   The 3rd line contains the three key outputs from the test:
    -   The calculated t-value is 3.8433 (we need this for reporting)
    -   There are 66 degrees of freedom (we need this for reporting)
    -   The p-value is 0.0002754.
-   The 4th line simply states the alternative hypothesis in terms of the difference between the two sample means (testing if the two sample means are different is equivalent to testing whether the difference in the means is equal to zero).
-   The 5th and 6th lines give the 95th confidence interval (we don't need to know this here).
-   The 7th, 8th and 9th lines give the sample means for each group (20.33077 in Aripo and 18.29655 in Guanapo) which we found earlier.

## Python

The `ttest()` function in `pingouin` needs two vectors as input, so we split the data as follows:

```{python}
aripo = rivers_py.query('river == "Aripo"')["length"]
guanapo = rivers_py.query('river == "Guanapo"')["length"]
```

Next, we perform the t-test. We specify that the variance are equal by setting `correction = False`. We also `transpose()` the data, so we can actually see the entire output.

```{python}
pg.ttest(aripo, guanapo,
         correction = False).transpose()
```
:::

Again, the p-value is what we're most interested in. Since the p-value is very small (much smaller than the standard significance level) we choose to say "that it is very unlikely that these two samples came from the same parent distribution and as such we can reject our null hypothesis" and state that:

> A Student's t-test indicated that the mean body length of male guppies in the Guanapo river ($\bar{x}$ = 18.29 mm) differs significantly from the mean body length of male guppies in the Aripo river ($\bar{x}$ = 20.33 mm, p = 0.0003).

Now there's a conversation starter.

::: {.callout-important}
Complete [Exercise -@sec-exr_turtles].
:::

## Exercises

### Q-Q plots rivers {#sec-exr_rivers}

:::{.callout-exercise}

{{< level 1 >}}

Create the Q-Q plots for the two rivers in the `data/CS1-twosample.csv` file and discuss with your neighbour what you see in light of the results from the above Shapiro-Wilk test.

::: {.callout-answer collapse=true}

::: {.panel-tabset group="language"}
## R (tidyverse)

```{r}
# we group the data by river
# then create a panel per river
# containing the Q-Q plot for that river
rivers %>% 
  ggplot(aes(sample = length)) +
  stat_qq() +
  stat_qq_line(colour = "red") +
  facet_wrap(facets = vars(river))
```

## R (base)

```{r}
par(mfrow=c(1,2))
qqnorm(uns_rivers$Aripo, main = "Aripo")
qqline(uns_rivers$Aripo, col = "red")

qqnorm(uns_rivers$Guanapo, main = "Guanapo")
qqline(uns_rivers$Guanapo, col = "red")
```

## Python

```{python}
#| results: hide
(ggplot(rivers_py,
        aes(sample = "length")) +
     stat_qq() +
     stat_qq_line(colour = "red") +
     facet_wrap("river"))
```
:::
:::
:::

### Turtles {#sec-exr_turtles}
::: {.callout-exercise}

{{< level 2 >}}

This exercise explores serum cholesterol concentrations in turtles.

Using the data in `data/CS1-turtle.csv`, test the null hypothesis that male and female turtles have the same mean serum cholesterol concentrations.

1.  Load the data
2.  Write down the null and alternative hypotheses
3.  Import the data
4.  Summarise and visualise the data
5.  Check your assumptions (normality and variance) using appropriate tests and plots
6.  Perform a two-sample t-test
7.  Write down a sentence that summarises the results that you have found

::: {.callout-answer collapse=true}
#### Data

Once you've loaded the data, have a look at the structure. The data is in a tidy data format, where each variable (thing that you measure) is in its own column. Each observation has its own row.

#### Hypotheses

$H_0$ : male mean $=$ female mean

$H_1$ : male mean $\neq$ female mean

#### Load, summarise and visualise data

Let's load the data and explore our data a bit more before we dive into the statistics.

::: {.panel-tabset group="language"}
## R (tidyverse)

```{r}
#| warning: false
# load the data
turtle <- read_csv("data/CS1-turtle.csv")

# and have a look
turtle
```

Let's summarise the data (although a visualisation is probably much easier to work with):

```{r}
# create summary statistics for each group
turtle %>% 
  group_by(sex) %>% 
  get_summary_stats(type = "common")
```

and visualise the data:

```{r}
# visualise the data
turtle %>% 
  ggplot(aes(x = sex, y = serum)) +
  geom_boxplot()
```

## R (base)

```{r}
#| warning: false
# load the data
turtle_r <- read.csv("data/CS1-turtle.csv")

# and have a look
head(turtle_r)
```

and visualise the data:

```{r}
# visualise the data
boxplot(serum ~ sex , data = turtle_r)
```

## Python

```{python}
turtle_py = pd.read_csv("data/CS1-turtle.csv")

turtle_py.describe()
```

and visualise the data:

```{python}
#| results: hide
(ggplot(turtle_py,
        aes(x = "sex", y = "serum")) +
     geom_boxplot())
```
:::

As always we use the plot and summary to assess three things:

1.  Does it look like we've loaded the data in correctly?
    -   We have two groups and the extreme values of our plots seem to match with our data set, so I'm happy that we haven't done anything massively wrong here.
2.  Do we think that there is a difference between the two groups?
    -   We need the result of the formal test to make sense given the data, so it's important to develop a sense of what we think is going to happen here. Whilst the ranges of the two groups suggests that the Female serum levels might be higher than the males when we look at things more closely we realise that isn't the case. The box plot shows that the median values of the two groups is virtually identical and this is backed up by the summary statistics we calculated: the medians are both about 224.1, and the means are fairly close too (225.7 vs 224.2). Based on this, and the fact that there are only 13 observations in total I would be very surprised if any test came back showing that there was a difference between the groups.
3.  What do we think about assumptions?
    -   Normality looks a bit worrying: whilst the `Male` group appears nice and symmetric (and so might be normal), the `Female` group appears to be quite skewed (since the median is much closer to the bottom than the top). We'll have to look carefully at the more formal checks to decided whether we think the data are normal enough for us to use a t-test.
    -   Homogeneity of variance. At this stage the spread of the data within each group looks similar, but because of the potential skew in the `Female` group we'll again want to check the assumptions carefully.

#### Assumptions

**Normality**

Let's look at the normality of each of the groups separately. There are several ways of getting at the `serum` values for `Male` and `Female` groups separately. All of them come down to splitting the data. Afterwards we use the Shapiro-Wilk ('formal' test), followed by Q-Q plots (much more informative).

::: {.panel-tabset group="language"}
## R (tidyverse)

```{r}
# perform Shapiro-Wilk test on each group
turtle %>% 
    filter(sex == "Female") %>% 
    pull(serum) %>% 
    shapiro.test()

turtle %>% 
    filter(sex == "Male") %>% 
    pull(serum) %>% 
    shapiro.test()
```

## R (base)

We can use the `unstack()` function to split the data, then access the relevant values.

```{r}
uns_turtle_r <- unstack(turtle_r, serum ~ sex)

uns_turtle_r
```

You can see that the data has been split by `sex`.

```{r}
shapiro.test(uns_turtle_r$Female)
shapiro.test(uns_turtle_r$Male)
```

## Python

```{python}
pg.normality(dv = "serum",
             group = "sex",
             data = turtle_py)
```
:::

The p-values for both Shapiro-Wilk tests are non-significant which suggests that the data are normal enough. This is a bit surprising given what we saw in the box plot but there are two bits of information that we can use to reassure us.

1.  The p-value for the `Female` group is smaller than for the `Male` group (suggesting that the `Female` group is closer to being non-normal than the `Male` group) which makes sense based on our visual observations.
2.  The Shapiro-Wilk test is generally quite relaxed about normality for small sample sizes (and notoriously strict for very large sample sizes). For a group with only 6 data points in it, the data would actually have to have a really, really skewed distribution. Given that the Female group only has 6 data points in it, it's not too surprising that the Shapiro-Wilk test came back saying everything is OK.

Given these caveats of the Shapiro-Wilk test (I'll stop mentioning them now, I think I've made my opinion clear ;)), let's look at the Q-Q plots.

::: {.panel-tabset group="language"}
## R (tidyverse)

```{r}
# create Q-Q plots for both groups
turtle %>% 
  ggplot(aes(sample = serum)) +
  stat_qq() +
  stat_qq_line(colour = "red") +
  facet_wrap(facets = vars(sex))
```

## R (base)

```{r}
par(mfrow=c(1,2))
qqnorm(uns_turtle_r$Female, main = "Female")
qqline(uns_turtle_r$Female, col = "red")
qqnorm(uns_turtle_r$Male, main = "Male")
qqline(uns_turtle_r$Male, col = "red")
```

## Python

```{python}
#| results: hide
# create Q-Q plots for both groups
(ggplot(turtle_py,
        aes(sample = "serum")) +
     stat_qq() +
     stat_qq_line(colour = "red") +
     facet_wrap("sex"))
```
:::

The results from the Q-Q plots echo what we've already seen from the Shapiro-Wilk analyses. The normality of the data in the `Male` group doesn't look too bad whereas the those in the `Female` group looks somewhat dodgy.

Overall, the assumption of normality of the data doesn't appear to be very well met at all, but we do have to bear in mind that there are only a few data points in each group and we might just be seeing this pattern in the data due to random chance rather than because the underlying populations are actually not normally distributed. Personally, though I'd edge towards non-normal here.

**Homogeneity of Variance**

It's not clear whether the data are normal or not, so it isn't clear which test to use here. The sensible approach is to do both and hope that they agree (fingers crossed!). Or err on the side of caution and assume they are not normal, but potentially throwing away statistical power (more on that later).

::: {.panel-tabset group="language"}
## R (tidyverse)

Bartlett's test gives us:

```{r}
# perform Bartlett's test
bartlett.test(serum ~ sex,
              data = turtle)
```

and Levene's test gives us:

```{r}
#| warning: false
# perform Levene's test
turtle %>% 
  levene_test(serum ~ sex)
```

## R (base)

Bartlett's test gives us:

```{r}
bartlett.test(serum ~ sex,
              data = turtle_r)
```

and Levene's test gives us:

```{r}
#| warning: false
# perform Levene's test
turtle %>% 
  levene_test(serum ~ sex)
```

## Python

Bartlett's test gives us:

```{python}
pg.homoscedasticity(dv = "serum",
                    group = "sex",
                    method = "bartlett",
                    data = turtle_py)
```

and Levene's test gives us:

```{python}
pg.homoscedasticity(dv = "serum",
                    group = "sex",
                    method = "levene",
                    data = turtle_py)
```
:::

The good news is that both Levene and Bartlett agree that there is homogeneity of variance between the two groups (thank goodness, that's one less thing to worry about!).

Overall, what this means is that we're not too sure about normality, but that homogeneity of variance is pretty good.

#### Implement two-sample t-test

Because of the result of the Bartlett test I know that I can carry out a two-sample Student's t-test. If the variances between the two groups were not equal, then we'd have to perform Welch's t-test.

::: {.panel-tabset group="language"}
## R (tidyverse)

```{r}
# perform two-sample t-test
t.test(serum ~ sex,
       alternative = "two.sided",
       var.equal = TRUE,
       data = turtle)
```

## R (base)

```{r}
t.test(serum ~ sex,
       alternative = "two.sided",
       var.equal = TRUE,
       data = turtle_r)
```

## Python

To test if the two groups are different from one another, we can use the `pg.ttest()` function.

This function requires the data to be separated into individual groups, so we need to split the `serum` data by `sex`. One of the ways we can do this is:

```{python}
turtle_male = turtle_py.query('sex == "Male"')["serum"]
turtle_female = turtle_py.query('sex == "Female"')["serum"]
```

Next, we use these data to test for differences:

```{python}
pg.ttest(turtle_female, turtle_male,
                alternative = "two-sided",
                correction = False).transpose()
```
:::

With a p-value of 0.544, this test tells us that there is insufficient evidence to suggest that the means of the two groups are different. A suitable summary sentence would be:

> A Student's two-sample t-test indicated that the mean serum cholesterol level did not differ significantly between male and female turtles (p = 0.544).

#### Discussion

In reality, because of the ambiguous normality assumption assessment, for this data set I would actually carry out two different tests; the two-sample t-test with equal variance and the Mann-Whitney U test. If both of them agreed then it wouldn't matter too much which one I reported (I'd personally report both with a short sentence to say that I'm doing that because it wasn't clear whether the assumption of normality had or had not been met), but it would be acceptable to report just one.
:::
:::

## Key points

::: {.callout-note}
-   Student's t tests are used when you have two samples of continuous data, which are normally distributed, independent of each other and have equal variance
-   A good way of assessing the assumption of normality is by checking the data against a Q-Q plot
- We can check equality of variance (homoscedasticity) with Bartlett's (normal data) or Levene's (non-normal data) test
:::
