---
title: "Multiple linear regression"
---

```{r}
#| echo: false
#| message: false
#| results: hide
source(file = "setup_files/setup.R")
```

```{python}
#| echo: false
#| message: false
import shutup;shutup.please()
exec(open('setup_files/setup.py').read())
```

::: callout-tip
## Learning outcomes

**Questions**

- How do I use the linear model framework with three predictor variables?

**Objectives**

- Be able to expand the linear model framework with three predictor variables
- Define the equation for the line of best fit for each categorical variable
- Be able to construct and analyse any possible combination of predictor variables in the data
:::

## Libraries and functions

::: {.callout-note collapse="true"}
## Click to expand

::: {.panel-tabset group="language"}
## tidyverse

### Libraries
### Functions

## R

### Libraries
### Functions

## Python

### Libraries
### Functions
:::
:::

## Purpose and aim
Revisiting the linear model framework and expanding to systems with three predictor variables.

## Data and hypotheses

The data set we'll be using is located in `data/CS5-pm2_5.csv`. It contains data on air pollution levels measured in London, in 2019. It also contains several meteorological measurements. Each variable was recorded on a daily basis.

Note: some of the variables are based on simulations.

It contains the following variables:

| variable | explanation |
|:--|:--|
| `avg_temp`| average daily temperature ($^\circ C$)|
| `date`| date of record|
| `location`| location in London (`inner` or `outer`) |
| `pm2_5`| concentration of PM2.5 ($\mu g / m^3$)|
| `rain_mm`| daily rainfall in mm (same across both locations)|
| `wind_m_s`| wind speed in $m/s$|

## Summarise and visualise

::: {.panel-tabset group="language"}
## tidyverse

Let's first load the data:

```{r}
pm2_5 <- read_csv("data/CS5-pm2_5.csv")

head(pm2_5)
```

It's the `pm2_5` response variable we're interested in here. Let's start by checking if there might be a difference between PM2.5 level in inner and outer London:

```{r}
ggplot(pm2_5, aes(x = location, y = pm2_5)) +
    geom_boxplot() +
    geom_jitter(width = 0.1, alpha = 0.7)
```

I've added the (jittered) data to the plot, with some transparency (`alpha = 0.7`). It's always good to look at the actual data and not just summary statistics (which is what the box plot is).

There seems to be quite a difference between the PM2.5 levels in the two London areas, with the levels in inner London being markedly higher. I'm not surprised by this! So when we do our statistical testing, I would expect to find a clear difference between the locations.

Apart from the location, there are quite a few numerical descriptor variables. We could plot them one-by-one, but that's a bit tedious. So instead we use the `pairs()` function again. This only works on numerical data, so we select all the columns that are numeric with `select_if(is.numeric)`:

```{r}
pm2_5 %>% 
    select_if(is.numeric) %>% 
    pairs(lower.panel = NULL)
```

We can see that there is not much of a correlation between `pm2_5` and `avg_temp` or `rain_mm`, whereas there might be something going on in relation to `wind_m_s`.

Other notable things include that rainfall seems completely independent of wind speed (rain fall seems pretty constant). Nor does the average temperature seem in any way related to wind speed (it looks like a random collection of data points!).

We can visualise the relationship between `pm2_5` and `wind_m_s` in a bit more detail, by plotting the data against each other and colouring by `location`:

```{r}
ggplot(pm2_5, aes(x = wind_m_s, y = pm2_5,
                  colour = location)) +
    geom_point()
```

This seems to show that there might be some linear relationship between PM2.5 levels and wind speed.

Another way of looking at this would be to create a correlation matrix, like we did before in the [correlations chapter](cs3_practical_correlations.qmd#correlation-coefficients):

```{r}
pm2_5 %>% 
    select_if(is.numeric) %>% 
    cor()
```

This confirms what we saw in the plots, there aren't any very strong correlations between the different (numerical) variables, apart from a negative correlation between `pm2_5` and `wind_m_s`, which has a Pearson's r of $r$ = `r pm2_5 %>% select_if(is.numeric) %>% cor_test() %>% filter(cor != 1) %>% arrange(desc(abs(cor))) %>% slice(1) %>% pull(cor)`.

## R

Let's first load the data:

```{r}
pm2_5_r <- read.csv("data/CS5-pm2_5.csv")

head(pm2_5_r)
```

It's the `pm2_5` response variable we're interested in here. Let's start by checking if there might be a difference between PM2.5 level in inner and outer London:

```{r}
boxplot(pm2_5 ~ location, col = "white", data = pm2_5_r)

stripchart(pm2_5 ~ location,
           data = pm2_5_r,
           method = "jitter",
           pch = 19,
           col = alpha("black", 0.4),
           vertical = TRUE,
           add = TRUE)
```

I've added the (jittered) data to the plot. To do this I've used the `stripchart()` function and added some transparency (`col = alpha("black", 0.4)`). It's always good to look at the actual data and not just summary statistics (which is what the box plot is).

There seems to be quite a difference between the PM2.5 levels in the two London areas, with the levels in inner London being markedly higher. I'm not surprised by this! So when we do our statistical testing, I would expect to find a clear difference between the locations.

Apart from the location, there are quite a few numerical descriptor variables. We could plot them one-by-one, but that's a bit tedious. So instead we use the `pairs()` function again. This only works on numerical data, so we select all the columns that are numeric with the base R `Filter()` function (not to be confused with the `dplyr::filter()` function). Note that there are many different ways to select numeric-only columns and a quick Google search will lead you to [Stackoverflow](https://stackoverflow.com/questions/5863097/selecting-only-numeric-columns-from-a-data-frame).

We could save the output of the `Filter()` operation into a new variable and use that with the `pairs()` function. However, since version 4.1 R has had a native pipe, using the `|>` symbol. There are some  [differences](https://towardsdatascience.com/understanding-the-native-r-pipe-98dea6d8b61b) between tidyverse's `%>%` and base R's `|>`, but we won't delve into this here.

Suffice to say, we can do the following:

```{r}
Filter(is.numeric, pm2_5_r) |> pairs(lower.panel = NULL)
```

We can see that there is not much of a correlation between `pm2_5` and `avg_temp` or `rain_mm`, whereas there might be something going on in relation to `wind_m_s`.

Other notable things include that rainfall seems completely independent of wind speed (rain fall seems pretty constant). Nor does the average temperature seem in any way related to wind speed (it looks like a random collection of data points!).

We can visualise the relationship between `pm2_5` and `wind_m_s` in a bit more detail, by plotting the data against each other and colouring by `location`:

```{r}
plot(pm2_5 ~ wind_m_s,
     col = factor(location),
     data = pm2_5_r)
```

This seems to show that there might be some linear relationship between PM2.5 levels and wind speed.

Another way of looking at this would be to create a correlation matrix, like we did before in the [correlations chapter](materials/cs3_practical_correlations.qmd#correlation-coefficients). Again, this only works on numerical values, so we get all the numerical columns and send this to the `cor()` function:

```{r}
Filter(is.numeric, pm2_5_r) |> cor()
```

This confirms what we saw in the plots, there aren't any very strong correlations between the different (numerical) variables, apart from a negative correlation between `pm2_5` and `wind_m_s`, which has a Pearson's r of $r$ = `r pm2_5 %>% select_if(is.numeric) %>% cor_test() %>% filter(cor != 1) %>% arrange(desc(abs(cor))) %>% slice(1) %>% pull(cor)`.

## Python

Let's first load the data:

```{python}
pm2_5_py = pd.read_csv("data/CS5-pm2_5.csv")

pm2_5_py.head()
```

It's the `pm2_5` response variable we're interested in here. Let's start by checking if there might be a difference between PM2.5 level in inner and outer London:

```{python}
#| results: hide
(ggplot(pm2_5_py, aes(x = "location", y = "pm2_5")) +
    geom_boxplot() +
    geom_jitter(width = 0.1, alpha = 0.7))
```

I've added the (jittered) data to the plot, with some transparency (`alpha = 0.7`). It's always good to look at the actual data and not just summary statistics (which is what the box plot is).

There seems to be quite a difference between the PM2.5 levels in the two London areas, with the levels in inner London being markedly higher. I'm not surprised by this! So when we do our statistical testing, I would expect to find a clear difference between the locations.

Apart from the location, there are quite a few numerical descriptor variables. At this point I should probably bite the bullet and install `seaborn`, so I can use the [pairplot()](https://seaborn.pydata.org/generated/seaborn.pairplot.html) function.

But I'm not going to ;-)

I'll just tell you that there is not much of a correlation between `pm2_5` and `avg_temp` or `rain_mm`, whereas there might be something going on in relation to `wind_m_s`. So I plot that instead and colour it by location:

```{python}
#| results: hide
(ggplot(pm2_5_py, aes(x = "wind_m_s",
                      y = "pm2_5",
                      colour = "location")) +
     geom_point())

```

This seems to show that there might be some linear relationship between PM2.5 levels and wind speed.

If I would plot all the other variables against each other, then I would spot that rainfall seems completely independent of wind speed (rain fall seems pretty constant). Nor does the average temperature seem in any way related to wind speed (it looks like a random collection of data points!). You can check this yourself!

Another way of looking at this would be to create a correlation matrix, like we did before in the [correlations chapter](materials/cs3_practical_correlations.qmd#correlation-coefficients):

```{python}
pm2_5_py.corr()
```

This confirms what we saw in the plots, there aren't any very strong correlations between the different (numerical) variables, apart from a negative correlation between `pm2_5` and `wind_m_s`, which has a Pearson's r of $r$ = `r pm2_5 %>% select_if(is.numeric) %>% cor_test() %>% filter(cor != 1) %>% arrange(desc(abs(cor))) %>% slice(1) %>% pull(cor)`.
:::

## Implement and interpret the test

From our initial observations we derived that there might be some relationship between PM2.5 levels and wind speed. We also noticed that this is likely to be different between inner and outer London.

If we would want to test for _every_ variable and interaction, then we would end up with a rather huge model, which would even include 3-way and a 4-way interaction! To illustrate the point that the process of model testing applies to as many variables as you like, we're adding the `avg_temp` and `rain_mm` variables to our model.

So in this case we create a model that takes into account all of the main effects (`avg_temp`, `location`, `rain_mm`, `wind_m_s`). We also include a potential two-way interaction (`location:wind_m_s`). The two-way interaction may be of interest since the PM2.5 levels in response to wind speed seem to differ between the two locations.

Our model is then as follows:

`pm2_5 ~ avg_temp, location + rain_mm + wind_m_s + wind_m_s:location`

So let's define and explore it!

::: {.panel-tabset group="language"}
## tidyverse

We write the model as follows:

```{r}
lm_pm2_5_full <- lm(pm2_5 ~ avg_temp + location + rain_mm + wind_m_s +
                       wind_m_s:location, data = pm2_5)
```

This will give us quite a few coefficients, so instead of just calling the `lm` object, I'm restructuring the output using the `tidy()` function from the `broom` package. It's installed with `tidyverse` but you have to load it separately using `library(broom)`.

```{r}
lm_pm2_5_full %>%
    tidy() %>% 
    select(term, estimate)
```

The question is, are all of these terms statistically significant? To find out we perform an ANOVA:

```{r}
anova(lm_pm2_5_full)
```

From this we can see that the interaction between `location` and `wind_m_s` is statistically significant. Which means that we can't just talk about the effect of `location` or `wind_m_s` on PM2.5 levels, without taking the other variable into account!

The p-values for the `avg_temp` and `rain_mm` main effects are not significant. This means that they're not contributing much to model's ability to explain our data. This matches what we already saw when we visualised the data.

What to do? We'll explore this in more detail in the chapter on model comparisons, but for now the most sensible option would be to redefine the model, but exclude those two variables. Here I have rewritten the model, using the shorthand `*` notation (`pm2_5 ~ location * wind_m_s` is equal to `pm2_5 ~ location + wind_m_s + wind_m_s:location`). I've named it `lm_pm2_5_red` to indicate it is a reduced model (with fewer variables than our original full model):

```{r}
lm_pm2_5_red <- lm(pm2_5 ~ location * wind_m_s, data = pm2_5)
```

Let's look at the new model coefficients:

```{r}
lm_pm2_5_red %>%
    tidy() %>% 
    select(term, estimate)
```

As we did in the linear regression on grouped data, we end up with two linear equations, one for `inner` London and one for `outer` London.

Our reference group is `inner` (remember, it takes a reference group in alphabetical order and we can see `outer` in the output).

So we end up with:

$PM2.5_{inner} = 18.24 - 0.29 \times wind\_m\_s$

$PM2.5_{outer} = (18.24 - 2.06) + (-0.29 - 0.43) \times wind\_m\_s$

which gives

$PM2.5_{outer} = 16.18 - 0.72 \times wind\_m\_s$


We still need to check the assumptions of the model:

```{r}
lm_pm2_5_red %>% 
    resid_panel(plots = c("resid", "qq", "ls", "cookd"),
              smoother = TRUE)
```

They all look pretty good, with the only weird thing being a small empty zone of predicted values just under 16. Nothing that is getting me worried though.

It'd be useful to visualise the model. We can take the model and use the `augment()` function to extract the fitted values (`.fitted`). These are the values for `pm2_5` that the model is predicting. We can then plot these against the `wind_m_s` measurements, colouring by `location`:

```{r}
lm_pm2_5_red %>% 
    augment() %>% 
    ggplot(aes(x = wind_m_s, y = .fitted, colour = location)) +
    geom_line(size = 1) +
    # add the original data
    geom_point(data = pm2_5, aes(wind_m_s, pm2_5, colour = location))
```

Note: in this case we're actually visualising the model with both the main effects and the interaction between them. This is also the default behaviour for the `lm` method of `geom_smooth()`, so we could have also plotted it with:

```{r}
#| eval: false
ggplot(data = pm2_5, aes(x = wind_m_s, y = pm2_5,
                         colour = location)) +
    geom_smooth(method = "lm", se = FALSE)

```

## R

```{r}
lm_pm2_5_full_r <- lm(pm2_5 ~ avg_temp + location + rain_mm + wind_m_s +
                       wind_m_s:location, data = pm2_5_r)
```

Let's look at the model:

```{r}
lm_pm2_5_full_r
```

Quite a few coefficients! The question is, are all of these terms statistically significant? To find out we perform an ANOVA:

```{r}
anova(lm_pm2_5_full_r)
```

From this we can see that the interaction between `location` and `wind_m_s` is statistically significant. Which means that we can't just talk about the effect of `location` or `wind_m_s` on PM2.5 levels, without taking the other variable into account!

The p-values for the `avg_temp` and `rain_mm` main effects are not significant. This means that they're not contributing much to model's ability to explain our data. This matches what we already saw when we visualised the data.

What to do? We'll explore this in more detail in the chapter on model comparisons, but for now the most sensible option would be to redefine the model, but exclude those two variables. Here I have rewritten the model, using the shorthand `*` notation (`pm2_5 ~ location * wind_m_s` is equal to `pm2_5 ~ location + wind_m_s + wind_m_s:location`). I've named it `lm_pm2_5_red` to indicate it is a reduced model (with fewer variables than our original full model):

```{r}
lm_pm2_5_red_r <- lm(pm2_5 ~ location * wind_m_s, data = pm2_5_r)
```

Let's look at the new model coefficients:

```{r}
lm_pm2_5_red_r
```

As we did in the linear regression on grouped data, we end up with two linear equations, one for `inner` London and one for `outer` London.

Our reference group is `inner` (remember, it takes a reference group in alphabetical order and we can see `outer` in the output).

So we end up with:

$PM2.5_{inner} = 18.24 - 0.29 \times wind\_m\_s$

$PM2.5_{outer} = (18.24 - 2.06) + (-0.29 - 0.43) \times wind\_m\_s$

which gives

$PM2.5_{outer} = 16.18 - 0.72 \times wind\_m\_s$


We still need to check the assumptions of the model:

```{r}
par(mfrow = c(2,2))
plot(lm_pm2_5_red_r)
```

They all look pretty good, with the only weird thing being a small empty zone of predicted values just under 16. Nothing that is getting me worried though.

It'd be useful to visualise the model. To do this, we need to split the data by `location`, create a linear model for each subset and then plot this with the original data.

```{r}
inner_r <- subset(pm2_5_r, location == "inner")
outer_r <- subset(pm2_5_r, location == "outer")

lm_inner_red <- lm(pm2_5 ~ wind_m_s, data = inner_r)
lm_outer_red <- lm(pm2_5 ~ wind_m_s, data = outer_r)
```

```{r}
plot(pm2_5 ~ wind_m_s,
     col = factor(location),
     data = pm2_5_r)

abline(lm_inner_red, col = 1)
abline(lm_outer_red, col = 2)
```


## Python
:::

## Exploring models

Rather than stop here however, we will use the concept of the linear model to its full potential and show that we can construct and analyse any possible combination of predictor variables for this data set. Namely we will consider the following four extra models, where reduce the complexity to the model, step-by-step:

| Model| Description|
|:- |:- |
|1. `pm2_5 ~ wind_m_s + location`| An additive model |
|2. `pm2_5 ~ wind_m_s` | Equivalent to a simple linear regression |
|3. `pm2_5 ~ location` | Equivalent to a one-way ANOVA |
|4. `pm2_5 ~ 1` | The null model, where we have no predictors |

### Additive model

To create the additive model, we drop the interaction term (keep in mind, this is to demonstrate the process - we would normally not do this because the interaction term is significant!).

::: {.panel-tabset group="language"}
## tidyverse

First, we define the model:
```{r}
lm_pm2_5_add <- lm(pm2_5 ~ location + wind_m_s,
                   data = pm2_5)
```

We can visualise this as follows:

```{r}
lm_pm2_5_add %>% 
    augment() %>% 
    ggplot(aes(x = wind_m_s, y = .fitted,
               colour = location)) +
    geom_line(size = 1) +
    geom_point(data = pm2_5,
               aes(x = wind_m_s, y = pm2_5))
```

Next, we extract the coefficient estimates:

```{r}
lm_pm2_5_add %>%
    tidy() %>% 
    select(term, estimate, p.value)
```

## R
## Python
:::

So our two equations would be as follows:

$PM2.5_{inner} = 19.22 - 0.50 \times wind\_m\_s$

$PM2.5_{outer} = (19.22 - 4.05) - 0.50 \times wind\_m\_s$

gives

$PM2.5_{outer} = 15.17 - 0.50 \times wind\_m\_s$

### Revisiting linear regression

::: {.panel-tabset group="language"}
## tidyverse

First, we define the model:
```{r}
lm_pm2_5_wind <- lm(pm2_5 ~ wind_m_s,
                   data = pm2_5)
```

We can visualise this as follows:

```{r}
lm_pm2_5_wind %>% 
    augment() %>% 
    ggplot(aes(x = wind_m_s, y = .fitted)) +
    geom_line(colour = "blue", size = 1) +
    geom_point(data = pm2_5,
               aes(x = wind_m_s, y = pm2_5))
```

::: {.callout-tip collapse="true"}
## Alternative using `geom_smooth()`

```{r}
ggplot(pm2_5, aes(x = wind_m_s, y = pm2_5)) +
    geom_point() +
    geom_smooth(method = "lm", se = FALSE)
```
:::

Next, we extract the coefficient estimates:

```{r}
lm_pm2_5_wind %>%
    tidy() %>% 
    select(term, estimate, p.value)
```

## R
## Python
:::

This gives us the following equation:

$PM2.5 = 17.33 - 0.53 \times wind\_m\_s$

### Revisiting ANOVA

If we're just looking at the effect of `location`, then we're essentially doing a one-way ANOVA.

::: {.panel-tabset group="language"}
## tidyverse

First, we define the model:
```{r}
lm_pm2_5_loc <- lm(pm2_5 ~ location,
                   data = pm2_5)
```

We can visualise this as follows:

```{r}
lm_pm2_5_loc %>% 
    augment() %>% 
    ggplot(aes(x = location, y = .fitted)) +
    geom_point(colour = "blue", size = 3) +
    geom_jitter(data = pm2_5,
                aes(x = location, y = pm2_5),
                width = 0.1,
                alpha = 0.2)
```

OK, what's going on here? I've plotted the `.fitted` values (the values predicted by the model) in blue and overlaid the original (with a little bit of jitter to avoid overplotting). However, there are only two predicted values!

We can check this and see that each unique fitted value occurs 365 times:

```{r}
lm_pm2_5_loc %>% 
    augment() %>% 
    count(location, .fitted)
```

This makes sense if we think back to our original ANOVA exploration. There we established that an ANOVA is just a special case of a linear model, where the fitted values are equal to the mean of each group.

We could even check this:

```{r}
pm2_5 %>% 
    group_by(location) %>% 
    summarise(mean_pm2_5 = mean(pm2_5))
```

So, that matches. We move on and extract the coefficient estimates:

```{r}
lm_pm2_5_loc %>%
    tidy() %>% 
    select(term, estimate, p.value)
```

These values match up exactly with the predicted values for each individual location.

## R
## Python
:::

This gives us the following equation:

$\bar{PM2.5_{inner}} = 16.94$

$\bar{PM2.5_{outer}} = 16.94 - 4.11 = 12.83$

### The null model

The null model by itself is rarely analysed for its own sake but is instead used a reference point for more sophisticated model selection techniques. It represents your data as an overal average value.

::: {.panel-tabset group="language"}
## tidyverse

We define the null model as follows:

```{r}
lm_pm2_5_null <- lm(pm2_5 ~ 1,
                    data = pm2_5)
```
We can just view the model:

```{r}
lm_pm2_5_null
```


## R
## Python
:::

This shows us that there is just one value: `r round(lm_pm2_5_null %>% tidy() %>% pull(estimate), digits = 2)`. This is the average across all the PM2.5 values in the data set.

Here we'd predict the PM2.5 values as follows:

$PM2.5 = `r round(lm_pm2_5_null %>% tidy() %>% pull(estimate), digits = 2)`$ 

## Exercise

::: {.callout-tip collapse="true"}
## Answer
::: {.panel-tabset group="language"}
## tidyverse
## R
## Python
:::
:::

## Key points

::: callout-note
-
-
-
:::
