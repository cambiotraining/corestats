{
  "hash": "d31b8999dfc4305237a0c3b5a6d9dda6",
  "result": {
    "markdown": "---\ntitle: \"Two-way ANOVA\"\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-tip}\n#### Learning outcomes\n\n**Questions**\n\n- When is the use of a two-way ANOVA appropriate?\n- How do I perform this in R?\n\n**Objectives**\n\n- Be able to perform a two-way ANOVA in R\n- Understand the concept of interaction between two predictor variables\n- Be able to plot interactions in R\n:::\n\n## Libraries and functions\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n### Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A collection of R packages designed for data science\nlibrary(tidyverse)\n\n# Converts stats functions to a tidyverse-friendly format\nlibrary(rstatix)\n\n# Creates diagnostic plots using ggplot2\nlibrary(ggResidpanel)\n```\n:::\n\n\n### Functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creates diagnostic plots\nggResidpanel::resid_panel()\n\n# Creates a linear model\nstats::lm()\n\n# Creates an ANOVA table for a linear model\nstats::anova()\n```\n:::\n\n\n## Python\n\n### Libraries\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# A Python data analysis and manipulation tool\nimport pandas as pd\n\n# Python equivalent of `ggplot2`\nfrom plotnine import *\n\n# Statistical models, conducting tests and statistical data exploration\nimport statsmodels.api as sm\n\n# Convenience interface for specifying models using formula strings and DataFrames\nimport statsmodels.formula.api as smf\n```\n:::\n\n\n### Functions\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Summary statistics\npandas.DataFrame.describe()\n\n# Plots the first few rows of a DataFrame\npandas.DataFrame.head()\n\n# Reads in a .csv file\npandas.read_csv()\n\n# Creates a model from a formula and data frame\nstatsmodels.formula.api.ols()\n\n# Creates an ANOVA table for one or more fitted linear models\nstatsmodels.stats.anova.anova_lm()\n```\n:::\n\n\n:::\n:::\n\n## Purpose and aim\n\nA two-way analysis of variance is used when we have two categorical predictor variables (or factors) and a single continuous response variable. For example, when we are looking at how body `weight` (continuous response variable in kilograms) is affected by sex (categorical variable, `male` or `female`) and `exercise` type (categorical variable, `control` or `runner`).\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nWhen analysing these type of data there are two things we want to know:\n\n1.\tDoes either of the predictor variables have an effect on the response variable i.e. does sex affect body weight? Or does being a runner affect body weight?\n2.\tIs there any **interaction** between the two predictor variables? An interaction would mean that the effect that exercise has on your weight depends on whether you are male or female rather than being independent of your sex. For example if being male means that runners weigh more than non-runners, but being female means that runners weight less than non-runners then we would say that there was an interaction.\n\nWe will first consider how to visualise the data before then carrying out an appropriate statistical test.\n\n## Data and hypotheses\n\nWe will recreate the example analysis used in the lecture. The data are stored as a `.csv` file called `data/CS4-exercise.csv`.\n\n## Summarise and visualise\n`exercise` is a data frame with three variables; `weight`, `sex` and `exercise.` `weight` is the continuous response variable, whereas `sex` and `exercise` are the categorical predictor variables.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nFirst, we read in the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexercise <- read_csv(\"data/CS4-exercise.csv\")\n```\n:::\n\n\nYou can visualise the data with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# visualise the data, sex vs weight\nggplot(exercise,\n       aes(x = sex, y = weight)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# visualise the data, exercise vs weight\nggplot(exercise,\n       aes(x = exercise, y = weight)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n:::\n\n\n## Python\n\nFirst, we read in the data:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nexercise_py = pd.read_csv(\"data/CS4-exercise.csv\")\n```\n:::\n\n\nYou can visualise the data with:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# visualise the data, sex vs weight\n(ggplot(exercise_py,\n        aes(x = \"sex\", y = \"weight\")) +\n  geom_boxplot())\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-12-1.png){width=614}\n:::\n\n```{.python .cell-code}\n# visualise the data, exercise vs weight\n(ggplot(exercise_py,\n        aes(x = \"exercise\", y = \"weight\")) +\n  geom_boxplot())\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-12-2.png){width=614}\n:::\n:::\n\n\n:::\n\nThese produce box plots showing the response variable (`weight`) only in terms of one of the predictor variables. The values of the other predictor variable in each case aren’t taken into account.\n\nA better way would be to visualise both variables at the same time. We can do this as follows:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exercise,\n       aes(x = sex, y = weight, fill = exercise)) +\n  geom_boxplot() +\n  scale_fill_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-13-5.png){width=672}\n:::\n:::\n\n\nThis produces box plots for all (four) combinations of the predictor variables. We are plotting `sex` on the x-axis; `weight` on the y-axis and filling the box plot by `exercise` regime.\n\nHere I've also changed the default colouring scheme, by using `scale_fill_brewer(palette = \"Dark2\")`. This uses a colour-blind friendly colour palette (more about the Brewer colour pallete [here](https://ggplot2.tidyverse.org/reference/scale_brewer.html)).\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(exercise_py,\n        aes(x = \"sex\",\n            y = \"weight\", fill = \"exercise\")) +\n     geom_boxplot() +\n     scale_fill_brewer(type = \"qual\", palette = \"Dark2\"))\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-14-1.png){width=614}\n:::\n:::\n\n\nThis produces box plots for all (four) combinations of the predictor variables. We are plotting `sex` on the x-axis; `weight` on the y-axis and filling the box plot by `exercise` regime.\n\nHere I've also changed the default colouring scheme, by using `scale_fill_brewer(type = \"qual\", palette = \"Dark2\")`. This uses a colour-blind friendly colour palette (more about the Brewer colour pallete [here](https://ggplot2.tidyverse.org/reference/scale_brewer.html)).\n\n:::\n\nIn this example there are only four box plots and so it is relatively easy to compare them and look for any interactions between variables, but if there were more than two groups per categorical variable, it would become harder to spot what was going on.\n\nTo compare categorical variables more easily we can just plot the group means which aids our ability to look for interactions and the main effects of each predictor variable. This is called an **interaction plot**.\n\nCreate an interaction plot:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe're adding a bit of jitter to the data, to avoid too much overlap between the data points. We can do this with `geom_jitter()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exercise,\n       aes(x = sex, y = weight,\n           colour = exercise, group = exercise)) +\n  geom_jitter(width = 0.05) +\n  stat_summary(fun = mean, geom = \"point\", size = 3) +\n  stat_summary(fun = mean, geom = \"line\") +\n  scale_colour_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-15-3.png){width=672}\n:::\n:::\n\n\nHere we plot `weight` on the y-axis, by `sex` on the x-axis.\n\n* we `colour` the data by `exercise` regime and `group` the data by `exercise` to work out the mean values of each group\n* `geom_jitter(width = 0.05)` displays the data, with a tiny bit of random noise, to separate the data points a bit for visualisation\n* `stat_summary(fun = mean)`calculates the mean for each group\n* `scale_colour_brewer()` lets us define the colour palette\n\nThe choice of which categorical factor is plotted on the horizontal axis and which is plotted as different lines is completely arbitrary. Looking at the data both ways shouldn’t add anything but often you’ll find that you prefer one plot to another.\n\nPlot the interaction plot the other way round:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exercise,\n       aes(x = exercise, y = weight,\n           colour = sex, group = sex)) +\n  geom_jitter(width = 0.05) +\n  stat_summary(fun = mean, geom = \"point\", size = 3) +\n  stat_summary(fun = mean, geom = \"line\") +\n  scale_colour_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## Python\n\nWe're adding a bit of jitter to the data, to avoid too much overlap between the data points. We can do this with `geom_jitter()`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(exercise_py,\n        aes(x = \"sex\", y = \"weight\",\n            colour = \"exercise\", group = \"exercise\")) +\n     geom_jitter(width = 0.05) +\n     stat_summary(fun_data = \"mean_cl_boot\",\n                  geom = \"point\", size = 3) +\n     stat_summary(fun_data = \"mean_cl_boot\",\n                  geom = \"line\") +\n     scale_colour_brewer(type = \"qual\", palette = \"Dark2\"))\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-17-1.png){width=614}\n:::\n:::\n\n\nHere we plot `weight` on the y-axis, by `sex` on the x-axis.\n\n* we `colour` the data by `exercise` regime and `group` the data by `exercise` to work out the mean values of each group\n* `geom_jitter(width = 0.05)` displays the data, with a tiny bit of random noise, to separate the data points a bit for visualisation\n* `stat_summary(fun_data = \"mean_cl_boot\")`calculates the mean for each group\n* `scale_colour_brewer()` lets us define the colour palette\n\nThe choice of which categorical factor is plotted on the horizontal axis and which is plotted as different lines is completely arbitrary. Looking at the data both ways shouldn’t add anything but often you’ll find that you prefer one plot to another.\n\nPlot the interaction plot the other way round:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(exercise_py,\n        aes(x = \"exercise\", y = \"weight\",\n            colour = \"sex\", group = \"sex\")) +\n     geom_jitter(width = 0.05) +\n     stat_summary(fun_data = \"mean_cl_boot\",\n                  geom = \"point\", size = 3) +\n     stat_summary(fun_data = \"mean_cl_boot\",\n                  geom = \"line\") +\n  scale_colour_brewer(type = \"qual\", palette = \"Dark2\"))\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-18-3.png){width=614}\n:::\n:::\n\n\n:::\n\nBy now you should have a good feeling for the data and could already provide some guesses to the following three questions:\n\n* Does there appear to be any interaction between the two categorical variables?\n*\tIf not:\n    * Does `exercise` have an effect on `weight`?\n    * Does `sex` have an effect on `weight`?\n    \nWe can now attempt to answer these three questions more formally using an ANOVA test. We have to test for three things: the interaction, the effect of `exercise` and the effect of `sex.`\n\n## Assumptions\n\nBefore we can formally test these things we first need to define the model and check the underlying assumptions. We use the following code to define the model:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define the linear model\nlm_exercise <- lm(weight ~ sex + exercise + sex:exercise,\n                  data = exercise)\n```\n:::\n\n\nThe `sex:exercise` term is how R represents the concept of an interaction between these two variables.\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# create a linear model\nmodel = smf.ols(formula = \"weight ~ exercise * sex\", data = exercise_py)\n# and get the fitted parameters of the model\nlm_exercise_py = model.fit()\n```\n:::\n\n\nThe formula `weight ~ exercise * sex` can be read as \"`weight` depends on `exercise` and `sex` *and* the interaction between `exercise` and `sex`.\n:::\n\nAs the two-way ANOVA is a type of linear model we need to satisfy pretty much the same assumptions as we did for a simple linear regression or a one-way ANOVA:\n\n1. The data must not have any systematic pattern to it\n2. The residuals must be normally distributed\n3. The residuals must have homogeneity of variance\n4. The fit should not depend overly much on a single point (no point should have high leverage).\n\nAgain, we will check these assumptions visually by producing four key diagnostic plots.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresid_panel(lm_exercise,\n            plots = c(\"resid\", \"qq\", \"ls\", \"cookd\"),\n            smoother = TRUE)\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n* The Residual plot shows the residuals against the predicted values. There is no systematic pattern here and this plot is pretty good.\n*\tThe Q-Q plot allows a visual inspection of normality. Again, this looks OK (not perfect but OK).\n*\tThe Location-Scale plot allows us to investigate whether there is homogeneity of variance. This plot is fine (not perfect but fine).\n* The Cook's D plot shows that no individual point has a high influence on the model (all values are well below 0.5)\n\n:::note\nThere is a shorthand way of writing:\n\n`weight ~ sex + exercise + sex:exercise`\n\nIf you use the following syntax:\n\n`weight ~ sex * exercise`\n\nThen R interprets it exactly the same way as writing all three terms.\nYou can see this if you compare the output of the following two commands:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(lm(weight ~ sex + exercise + sex:exercise,\n         data = exercise))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: weight\n              Df Sum Sq Mean Sq F value    Pr(>F)    \nsex            1 4510.1  4510.1 366.911 < 2.2e-16 ***\nexercise       1 1312.0  1312.0 106.733 < 2.2e-16 ***\nsex:exercise   1  404.4   404.4  32.902 4.889e-08 ***\nResiduals    156 1917.6    12.3                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nanova(lm(weight ~ sex * exercise,\n         data = exercise))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: weight\n              Df Sum Sq Mean Sq F value    Pr(>F)    \nsex            1 4510.1  4510.1 366.911 < 2.2e-16 ***\nexercise       1 1312.0  1312.0 106.733 < 2.2e-16 ***\nsex:exercise   1  404.4   404.4  32.902 4.889e-08 ***\nResiduals    156 1917.6    12.3                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n:::\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndgplots(lm_exercise_py)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-24-1.png){width=96}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/dgplots/2023_08_18-03-45-50_PM_dgplots.png){width=780}\n:::\n:::\n\n:::\n\n## Implement and interpret test\nThe assumptions appear to be met well enough, meaning we can implement the ANOVA. We do this as follows (this is probably the easiest bit!):\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# perform the ANOVA\nanova(lm_exercise)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: weight\n              Df Sum Sq Mean Sq F value    Pr(>F)    \nsex            1 4510.1  4510.1 366.911 < 2.2e-16 ***\nexercise       1 1312.0  1312.0 106.733 < 2.2e-16 ***\nsex:exercise   1  404.4   404.4  32.902 4.889e-08 ***\nResiduals    156 1917.6    12.3                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nWe have a row in the table for each of the different effects that we’ve asked R to consider. The last column is the important one as this contains the p-values. We need to look at the interaction row first.\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsm.stats.anova_lm(lm_exercise_py, typ = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   sum_sq     df           F        PR(>F)\nexercise      1311.970522    1.0  106.733448  2.177106e-19\nsex           4636.450232    1.0  377.191645  1.760076e-43\nexercise:sex   404.434414    1.0   32.902172  4.889216e-08\nResidual      1917.556353  156.0         NaN           NaN\n```\n:::\n:::\n\n\nWe have a row in the table for each of the different effects that we’ve asked Python to consider. The last column is the important one as this contains the p-values. We need to look at the interaction row first.\n\n:::\n\n`sex:exercise` has a p-value of about 4.89e-08 (which is smaller than 0.05) and so we can conclude that the interaction between `sex` and `exercise` is significant.\n\n**This is where we must stop.**\n\nThe top two lines (corresponding to the effects of `sex` and `exercise`) are meaningless now. This is because the interaction means that we cannot interpret the main effects independently.\n\nIn this case, `weight` depends on _and_ the sex _and_ the exercise regime. This means the effect of `sex` on `weight` is dependent on `exercise` (and vice-versa).\n\nWe would report this as follows:\n\n> A two-way ANOVA test showed that there was a significant interaction between the effects of sex and exercise on weight (p = 4.89e-08). Exercise was associated with a small loss of weight in males but a larger loss of weight in females.\n\n## Exercises\n\n### Auxin response {#sec-exr_auxin}\n\n:::{.callout-exercise}\n\n\n{{< level 2 >}}\n\n\n\nPlant height responses to auxin in different genotypes\n\nThese `data/CS4-auxin.csv` data are from a simulated experiment that looks at the effect of the plant hormone auxin on plant height.\n\nThe experiment consists of two genotypes: a wild type control and a mutant (`genotype`). The plants are treated with auxin at different concentrations: `none`, `low` and `high`, which are stored in the `concentration` column.\n\nThe response variable plant height (`plant_height`) is then measured at the end of their life cycle, in centimeters.\n\nQuestions to answer:\n\n* Visualise the data using boxplots and interaction plots.\n* Does there appear to be any interaction between `genotype` and `concentration`?\n* Carry out a two-way ANOVA test.\n* Check the assumptions.\n* What can you conclude? (Write a sentence to summarise).\n\n::: {.callout-answer collapse=\"true\"}\n## Answer\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n#### Load the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in the data\nauxin_response <- read_csv(\"data/CS4-auxin.csv\")\n\n# let's have a peek at the data\nhead(auxin_response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  genotype concentration plant_height\n  <chr>    <chr>                <dbl>\n1 control  high                  33.7\n2 control  high                  27.1\n3 control  high                  22.9\n4 control  high                  28.7\n5 control  high                  30.7\n6 control  high                  26.9\n```\n:::\n:::\n\n\n#### Visualise the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(auxin_response,\n       aes(x = genotype, y = plant_height)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(auxin_response,\n       aes(x = concentration, y = plant_height)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-29-2.png){width=672}\n:::\n:::\n\n\nLet's look at the interaction plots. We're only plotting the mean values here, but feel free to explore the data itself by adding another `geom_`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# by genotype\nggplot(auxin_response,\n       aes(x = concentration,\n          y = plant_height,\n          colour = genotype, group = genotype)) +\n  stat_summary(fun = mean, geom = \"point\", size = 3) +\n  stat_summary(fun = mean, geom = \"line\") +\n  geom_jitter(alpha = 0.3, width = 0.1) +\n  scale_colour_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# by concentration\nggplot(auxin_response,\n       aes(x = genotype,\n           y = plant_height,\n           colour = concentration, group = concentration)) +\n  stat_summary(fun = mean, geom = \"point\", size = 3) +\n  stat_summary(fun = mean, geom = \"line\") +\n  geom_jitter(alpha = 0.3, width = 0.1) +\n  scale_colour_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-30-2.png){width=672}\n:::\n:::\n\n\nWe've constructed both box plots and two interaction plots. We only needed to do one interaction plot but I find it can be quite useful to look at the data from different angles.\n\nThe interaction plots show the mean values for each group, so I prefer to overlay this with the actual data. Both interaction plots suggest that there is an interaction here as the lines in the plots aren't parallel. Looking at the interaction plot with `concentration` on the x-axis, it appears that there is non-difference between genotypes when the concentration is `low`, but that there is a difference between genotypes when the concentration is `none` or `high`.\n\n#### Assumptions\n\nFirst we need to define the model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define the linear model, with interaction term\nlm_auxin <- lm(plant_height ~ concentration * genotype,\n               data = auxin_response)\n```\n:::\n\n\nNext, we check the assumptions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresid_panel(lm_auxin,\n            plots = c(\"resid\", \"qq\", \"ls\", \"cookd\"),\n            smoother = TRUE)\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nSo, these actually all look pretty good, with the data looking normally distributed (**Q-Q plot**), linearity OK (**Residual plot**), homogeneity of variance looking sharp (**Location-scale plot**) and no clear influential points (**Cook's D plot**).\n\n#### Implement the test\n\nLet's carry out a two-way ANOVA:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# perform the ANOVA\nanova(lm_auxin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: plant_height\n                        Df Sum Sq Mean Sq F value    Pr(>F)    \nconcentration            2 4708.2 2354.12 316.333 < 2.2e-16 ***\ngenotype                 1   83.8   83.84  11.266 0.0009033 ***\nconcentration:genotype   2 1034.9  517.45  69.531 < 2.2e-16 ***\nResiduals              269 2001.9    7.44                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n#### Interpret the output and report the results\n\nThere is a significant interaction between `concentration` and `genotype`.\n\n## Python\n\n#### Load the data\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# read in the data\nauxin_response_py = pd.read_csv(\"data/CS4-auxin.csv\")\n\n# let's have a peek at the data\nauxin_response_py.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  genotype concentration  plant_height\n0  control          high          33.7\n1  control          high          27.1\n2  control          high          22.9\n3  control          high          28.7\n4  control          high          30.7\n```\n:::\n:::\n\n\n#### Visualise the data\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(auxin_response_py,\n       aes(x = \"genotype\", y = \"plant_height\")) +\n  geom_boxplot())\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-35-1.png){width=614}\n:::\n\n```{.python .cell-code}\n(ggplot(auxin_response_py,\n       aes(x = \"concentration\", y = \"plant_height\")) +\n  geom_boxplot())\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-35-2.png){width=614}\n:::\n:::\n\n\nLet's look at the interaction plots. We're also including the data itself here with `geom_jitter()`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# by genotype\n(ggplot(auxin_response_py,\n        aes(x = \"concentration\",\n            y = \"plant_height\",\n            colour = \"genotype\", group = \"genotype\")) +\n     stat_summary(fun_data = \"mean_cl_boot\",\n                  geom = \"point\", size = 3) +\n     stat_summary(fun_data = \"mean_cl_boot\",\n                  geom = \"line\") +\n     geom_jitter(alpha = 0.3, width = 0.1) +\n     scale_colour_brewer(type = \"qual\", palette = \"Dark2\"))\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-36-5.png){width=614}\n:::\n\n```{.python .cell-code}\n# by concentration\n(ggplot(auxin_response_py,\n        aes(x = \"genotype\",\n            y = \"plant_height\",\n            colour = \"concentration\", group = \"concentration\")) +\n     stat_summary(fun_data = \"mean_cl_boot\",\n                  geom = \"point\", size = 3) +\n     stat_summary(fun_data = \"mean_cl_boot\",\n                  geom = \"line\") +\n     geom_jitter(alpha = 0.3, width = 0.1) +\n     scale_colour_brewer(type = \"qual\", palette = \"Dark2\"))\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-36-6.png){width=614}\n:::\n:::\n\n\nWe've constructed both box plots and two interaction plots. We only needed to do one interaction plot but I find it can be quite useful to look at the data from different angles.\n\nThe interaction plots show the mean values for each group, so I prefer to overlay this with the actual data. Both interaction plots suggest that there is an interaction here as the lines in the plots aren't parallel. Looking at the interaction plot with `concentration` on the x-axis, it appears that there is non-difference between genotypes when the concentration is `low`, but that there is a difference between genotypes when the concentration is `none` or `high`.\n\n#### Assumptions\n\nFirst we need to define the model:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# create a linear model\nmodel = smf.ols(formula= \"plant_height ~ C(genotype) * concentration\", data = auxin_response_py)\n# and get the fitted parameters of the model\nlm_auxin_py = model.fit()\n```\n:::\n\n\nNext, we check the assumptions:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndgplots(lm_auxin_py)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/dgplots/2023_08_18-03-45-55_PM_dgplots.png){width=782}\n:::\n:::\n\nSo, these actually all look pretty good, with the data looking normally distributed (**Q-Q plot**), linearity OK (**Residual plot**), homogeneity of variance looking sharp (**Location-scale plot**) and no clear influential points (**Influential points plot**).\n\n#### Implement the test\n\nLet's carry out a two-way ANOVA:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsm.stats.anova_lm(lm_auxin_py, typ = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                sum_sq     df           F        PR(>F)\nC(genotype)                  83.839560    1.0   11.265874  9.033241e-04\nconcentration              4578.890410    2.0  307.642376  3.055198e-70\nC(genotype):concentration  1034.894263    2.0   69.531546  4.558874e-25\nResidual                   2001.872330  269.0         NaN           NaN\n```\n:::\n:::\n\n\n#### Interpret the output and report the results\n\nThere is definitely a significant interaction between `concentration` and `genotype`.\n\n:::\n\nSo, we can conclude the following:\n\n> A two-way ANOVA showed that there is a significant interaction between genotype and auxin concentration on plant height (p = 4.56e-25). Increasing auxin concentration appears to result in a reduction of plant height in both wild type and mutant genotypes. The response in the mutant genotype seems to be less pronounced than in wild type.\n\n:::\n:::\n\n### Tulips {#sec-exr_tulips}\n\n:::{.callout-exercise}\n\n\n{{< level 2 >}}\n\n\n\nBlooms and growing conditions\n\nWe're sticking with the plant theme and using the `data/CS4-tulip.csv` data set, which contains information on an experiment to determine the best conditions for growing tulips (well someone has to care about these sorts of things!). The average number of flower heads (blooms) were recorded for 27 different plots. Each plot experienced one of three different watering regimes and one of three different shade regimes.\n\n* Investigate how the number of blooms is affected by different growing conditions.\n\nNote: have a look at the data and make sure that they are in the correct format!\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n::: {.panel-tabset group=\"language\"}\n## R\n\n#### Load the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in the data\ntulip <- read_csv(\"data/CS4-tulip.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 27 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): water, shade, blooms\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# have a quick look at the data\ntulip\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 27 × 3\n   water shade blooms\n   <dbl> <dbl>  <dbl>\n 1     1     1    0  \n 2     1     2    0  \n 3     1     3  111. \n 4     2     1  183. \n 5     2     2   59.2\n 6     2     3   76.8\n 7     3     1  225. \n 8     3     2   83.8\n 9     3     3  135. \n10     1     1   80.1\n# ℹ 17 more rows\n```\n:::\n:::\n\n\nIn this data set the watering regime (`water`) and shading regime (`shade`) are encoded with numerical values. However, these numbers are actually categories, representing the amount of water/shade.\n\nAs such, we don't want to treat these as numbers but as _factors_. At the moment they are numbers, which we can tell with `<dbl>`, which stands for `double`. \n\nWe can convert the columns using the `as_factor()` function. Because we'd like to keep referring to these columns as factors, we will update our existing data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert watering and shade regimes to factor\ntulip <- tulip %>% \n  mutate(water = as_factor(water),\n         shade = as_factor(shade))\n```\n:::\n\n\nThis data set has three variables; `blooms` (which is the response variable) and `water` and `shade` (which are the two potential predictor variables). \n\n#### Visualise the data\n\nAs always we'll visualise the data first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# by watering regime\nggplot(tulip,\n       aes(x = water, y = blooms)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# by shading regime\nggplot(tulip,\n       aes(x = shade, y = blooms)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-44-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# interaction plot by watering regime\nggplot(tulip,\n       aes(x = shade,\n           y = blooms,\n           colour = water, group = water)) +\n  stat_summary(fun = mean, geom = \"point\", size = 3) +\n  stat_summary(fun = mean, geom = \"line\") +\n  geom_jitter(alpha = 0.3, width = 0.1) +\n  scale_colour_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-44-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# interaction plot by shade regime\nggplot(tulip,\n       aes(x = water,\n           y = blooms,\n           colour = shade, group = shade)) +\n  stat_summary(fun = mean, geom = \"point\", size = 3) +\n  stat_summary(fun = mean, geom = \"line\") +\n  geom_jitter(alpha = 0.3, width = 0.1) +\n  scale_colour_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-44-4.png){width=672}\n:::\n:::\n\n\nAgain, both interaction plots suggest that there might be an interaction here. Digging in a little deeper from a descriptive perspective, it looks as though that `water` regime 1 is behaving differently to `water` regimes 2 and 3 under different shade conditions.\n\n#### Assumptions\n\nFirst we need to define the model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define the linear model\nlm_tulip <- lm(blooms ~ water * shade,\n               data = tulip)\n```\n:::\n\n\nNext, we check the assumptions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresid_panel(lm_tulip,\n            plots = c(\"resid\", \"qq\", \"ls\", \"cookd\"),\n            smoother = TRUE)\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\nThese are actually all OK. A two-way ANOVA analysis is on the cards.\n\n#### Implement the test\n\nLet's carry out the two-way ANOVA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# perform the ANOVA\nanova(lm_tulip)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: blooms\n            Df Sum Sq Mean Sq F value    Pr(>F)    \nwater        2 103626   51813 22.0542 1.442e-05 ***\nshade        2  36376   18188  7.7417   0.00375 ** \nwater:shade  4  41058   10265  4.3691   0.01211 *  \nResiduals   18  42288    2349                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n#### Interpret the output and report results\n\nSo we do appear to have a significant interaction between `water` and `shade` as expected.\n\n## Python\n\n#### Load the data\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# read in the data\ntulip_py = pd.read_csv(\"data/CS4-tulip.csv\")\n\n# have a quick look at the data\ntulip_py.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   water  shade  blooms\n0      1      1    0.00\n1      1      2    0.00\n2      1      3  111.04\n3      2      1  183.47\n4      2      2   59.16\n```\n:::\n:::\n\n\nIn this data set the watering regime (`water`) and shading regime (`shade`) are encoded with numerical values. However, these numbers are actually categories, representing the amount of water/shade.\n\nAs such, we don't want to treat these as numbers but as *factors*. We can convert the columns using `astype(object)`. Because we'd like to keep referring to these columns as factors, we will update our existing data set.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# convert watering and shade regimes to factor\ntulip_py['water'] = tulip_py['water'].astype(object)\ntulip_py['shade'] = tulip_py['shade'].astype(object)\n```\n:::\n\n\nThis data set has three variables; `blooms` (which is the response variable) and `water` and `shade` (which are the two potential predictor variables). \n\n#### Visualise the data\n\nAs always we'll visualise the data first:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# by watering regime\n(ggplot(tulip_py,\n        aes(x = \"water\", y = \"blooms\")) +\n     geom_boxplot())\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-50-1.png){width=614}\n:::\n\n```{.python .cell-code}\n  \n# by shading regime\n(ggplot(tulip_py,\n        aes(x = \"shade\", y = \"blooms\")) +\n     geom_boxplot())\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-50-2.png){width=614}\n:::\n\n```{.python .cell-code}\n# interaction plot by watering regime\n(ggplot(tulip_py,\n        aes(x = \"shade\", y = \"blooms\",\n            colour = \"water\", group = \"water\")) +\n     stat_summary(fun_data = \"mean_cl_boot\",\n                  geom = \"point\", size = 3) +\n     stat_summary(fun_data = \"mean_cl_boot\",\n                  geom = \"line\") +\n     geom_jitter(alpha = 0.3, width = 0.1) +\n     scale_colour_brewer(type = \"qual\", palette = \"Dark2\"))\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-50-3.png){width=614}\n:::\n\n```{.python .cell-code}\n# interaction plot by shade regime\n(ggplot(tulip_py,\n        aes(x = \"water\", y = \"blooms\",\n            colour = \"shade\", group = \"shade\")) +\n     stat_summary(fun_data = \"mean_cl_boot\",\n                  geom = \"point\", size = 3) +\n     stat_summary(fun_data = \"mean_cl_boot\",\n                  geom = \"line\") +\n     geom_jitter(alpha = 0.3, width = 0.1) +\n     scale_colour_brewer(type = \"qual\", palette = \"Dark2\"))\n```\n\n::: {.cell-output-display}\n![](cs4_practical_two-way-anova_files/figure-html/unnamed-chunk-50-4.png){width=614}\n:::\n:::\n\n\nAgain, both interaction plots suggest that there might be an interaction here. Digging in a little deeper from a descriptive perspective, it looks as though that `water` regime 1 is behaving differently to `water` regimes 2 and 3 under different shade conditions.\n\n#### Assumptions\n\nFirst we need to define the model:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# create a linear model\nmodel = smf.ols(formula= \"blooms ~ water * shade\", data = tulip_py)\n# and get the fitted parameters of the model\nlm_tulip_py = model.fit()\n```\n:::\n\n\nNext, we check the assumptions:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndgplots(lm_tulip_py)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/dgplots/2023_08_18-03-45-59_PM_dgplots.png){width=798}\n:::\n:::\n\n\nThese are actually all OK. A two-way ANOVA analysis is on the cards.\n\n#### Implement the test\n\nLet's carry out the two-way ANOVA.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsm.stats.anova_lm(lm_tulip_py, typ = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    sum_sq    df          F    PR(>F)\nwater        103625.786985   2.0  22.054200  0.000014\nshade         36375.936807   2.0   7.741723  0.003750\nwater:shade   41058.139437   4.0   4.369108  0.012108\nResidual      42288.185200  18.0        NaN       NaN\n```\n:::\n:::\n\n\n#### Interpret the output and report results\n\nSo we do appear to have a significant interaction between `water` and `shade` as expected.\n:::\n\n> A two-way ANOVA showed that there is a significant interaction between watering and shading regimes on number of blooms (p = 1.21e-02).\n\n:::\n:::\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- A two-way ANOVA is used when there are two categorical variables and a single continuous variable\n- We can visually check for interactions between the categorical variables by using interaction plots\n- The two-way ANOVA is a type of linear model and assumes the following:\n    1. the data have no systematic pattern\n    2. the residuals are normally distributed\n    3. the residuals have homogeneity of variance\n    4. the fit does not depend on a single point (no single point has high leverage)\n:::\n",
    "supporting": [
      "cs4_practical_two-way-anova_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}